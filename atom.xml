<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bd17kaka's blog]]></title>
  <link href="http://zhangdian.github.com/atom.xml" rel="self"/>
  <link href="http://zhangdian.github.com/"/>
  <updated>2013-07-10T21:57:55+08:00</updated>
  <id>http://zhangdian.github.com/</id>
  <author>
    <name><![CDATA[bd17kaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[spf介绍]]></title>
    <link href="http://zhangdian.github.com/blog/2013/07/10/spf/"/>
    <updated>2013-07-10T21:53:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/07/10/spf</id>
    <content type="html"><![CDATA[<h2>SPF</h2>

<h3>RFC</h3>

<p>SPF在RFC4408中定义。</p>

<h3>概述</h3>

<p>SPF是一个邮件验证系统，通过检测邮件欺诈，通过验证发送者的ip地址，来防止垃圾邮件。</p>

<p>SPF允许管理员通过在DNS上指定一个SPF record（or TXT record）来指定允许哪些机器可以通过一个指定的域名发送邮件。</p>

<p>邮件服务器使用这个DNS来检测来自一个domain(smtp会话的mailfrom的domain)的邮件是否通过一个由domain的管理员认可的host发出。</p>

<p>也就是在DNS上，为一个域名指定几个ip，凡是发送到该域名上的，必须是这几个ip发来的，才被认为是合法的，其他的都是违法的。</p>

<h3>工作原理</h3>

<p>SMTP协议允许任何计算机发送被声明为任意mailfrom的邮件。这被那些经常使用伪造邮件地址的spammers充分利用，导致很难跟踪到邮件发送者，并且很容易使spammers隐藏自己的身份，从而达到避开责任的目的。很多人相信，在现代的SMTP中，任何人都可以随意伪造发送地址是一个安全漏洞。</p>

<p>SPF允许一个domain的拥有者通过使用指定的DNS记录（SPF, type99），来授权哪些机器（ip）使用带有那个domain的发送地址来发送邮件。</p>

<p>接受者在接收消息体的时候，首先验证SPF记录，从而阻止来自未被认证的发送地址的消息。</p>

<p>在新的record类型普遍使用到DNS软件中之前，早期的实现都使用TXT records实现。为SPF使用TXT records是一个过渡措施。当然，如果在DNS上同时指定两种记录的话，两者的记录值必须是一样的。</p>

<p>发送者的ip地址在SMTP对象开始的时候传输，如果服务者器拒绝发送，那么这个未被验证的客户端会接收到一个拒绝消息，如果这个客户端是一个MTA，那么会有一个bounce message会被发送到原始的发送地址。</p>

<p>如果服务器接收发送者，接下来会接收recipients以及body of message，然后会插入一个Return-Path到message header，来保存发送地址。这个Return-Path通常和原始发送者的FROM或者SENDER相匹配，然后这个并不是必须的，SPF也不阻止伪造这个地址。</p>

<h3>实现</h3>

<p>SPF包含三个相关的工作：</p>

<ul>
<li><p>1.发布一个policy，在DNS信息中添加记录；类似</p>

<p>  example.com.          TXT &#8220;v=spf1 +mx a:colo.example.com/28 -all&#8221;</p></li>
<li><p>2.检查并且使用SPF信息；</p></li>
<li>3.修改邮件转发</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://www.ietf.org/rfc/rfc4408.txt">RFC4408</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell学习笔记——文本处理工具]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/25/learning-shell/"/>
    <updated>2013-06-25T21:46:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/25/learning-shell</id>
    <content type="html"><![CDATA[<h2>文本处理工具</h2>

<h3>排序工具 <strong>sort</strong></h3>

<p>sort将输入看做有多条<em>记录</em>的数据流。</p>

<ul>
<li><em>记录</em>是由可变宽度的<em>字段</em>组成；</li>
<li><em>记录</em>是以<em>换行字符</em>为定界符；</li>
<li><em>字段</em>的定界符则是<em>空白字符</em>或者是用户指定的<em>单个</em>字符；</li>
</ul>


<h4>常用选项</h4>

<ul>
<li>-b 忽略开头的空白</li>
<li>-f 忽略大小写</li>
<li>-i 忽略无法打印的字符</li>
<li>-k 定义进行排序的键值字段</li>
<li>-m 将排好序的文件，合并为一个排序后的输出数据流</li>
<li>-n 以整数类型比较字段</li>
<li>-o 输出到文件（如果输出文件盒输入文件为同一文件，那么会将它复制到一个临时的文件）</li>
<li>-r 倒序排序</li>
<li>-t 指定单个字符，为默认的字段分隔字符，取代默认的空白字符</li>
<li>-u 如果有<em>相同键值</em>的记录，只保留其中的一条</li>
</ul>


<p>有一点需要注意：对于指定了<code>-n</code>选项，那么在收集指定的键值字段的时候，如果遇到非阿拉伯数字，那么就会停止收集，而不会收集到记录的结尾处。比如<code>-k3nr</code>，并不会从第三个字段开始，一直收集到记录的结尾处，而是遇到非阿拉伯数字的时候就会截止。</p>

<!-- more -->


<h4>使用示例</h4>

<pre><code>sort -k2       // 排序键值从第二个字段开始，一直到记录的结尾
sort -k3,4     // 排序键值从第三个字段开始，直到第四个字段结尾处
sour -k2.3,4.5 // 排序键值从第二个字段的第三个字符开始，直到第四个字段的第五个字符结束
</code></pre>

<p>有两点需要注意：</p>

<ul>
<li>如果排序的键值正好的记录的结尾处之后，则排序键值空，并且空的排序键值在排序的时候优先于所有的非空键值；</li>
<li>如果出现了多个-k选项，那么会从第一个键值开始排序，找到匹配该键值的记录后，再进行第二个键值字段的排序；</li>
</ul>


<h4>sort的稳定性</h4>

<p>排序的稳定性是指：相同键值的记录在排序之后，是否能够保持相同的顺序。当以多键值为记录进行排序时，或者是以管道处理时，排序稳定性就非常重要了。</p>

<p>而sort排序并不是稳定的。幸好GNU实现了coreutils包，弥补了不足，它可以通过&#8211;stable选项补救此问题。</p>

<h3>删除重复记录 <strong>uniq</strong></h3>

<p>在前面讲到的<code>sort</code>命令中，可以使用<code>sort -u</code>命令来删除重复的记录。<strong>而它是依据匹配的键值来删除记录的，而并不是匹配完整的记录</strong>。</p>

<p>uniq提供另外一种过滤方式，常用语管道中，用来删除已使用<code>sort</code>排序之后的，<strong>重复的记录</strong>。</p>

<h4>常用选项</h4>

<ul>
<li>-c 在每个输出行之前加上该行重复的次数</li>
<li>-d 仅显示重复的行</li>
<li>-u 显示未重复的行</li>
</ul>


<h4>使用示例</h4>

<pre><code>sort ... | uniq | ...
</code></pre>

<h3>格式化段落 <strong>fmt</strong></h3>

<p>fmt命令可以将数据流完成重新格式化。</p>

<h4>常用选项</h4>

<ul>
<li>-s 仅切割较长的行，但是不会将短行结合成较长的行</li>
<li>-w_n_ 设置输出行宽度为n个字符（默认通常约为75个字符左右）</li>
</ul>


<h3>计算行数、字数和字符数 <strong>wc</strong></h3>

<p>wc默认输出时一行报告，包括行数、字数以及字节数。</p>

<p>wc通常是处理来自于通道的输入数据，但是它也可以接收命令行的文件参数，生成一行一个结果，附上报告。</p>

<h4>常用选项</h4>

<ul>
<li>-c 字节数</li>
<li>-l 行数</li>
<li>-w 字数</li>
</ul>


<p>有一点需要注意：-c原本是显示字符数，但是因为有多字节字符集编码的存在（比如utf8），所以字节数已经不等于字符数了，所以POSIX出现了<code>-m</code>选项，用于计算多字节字符。对于8位字符数而言，它是等同于<code>-c</code>的。</p>

<h4>使用示例</h4>

<pre><code>echo blog bd17kaka net | wc -l // 读取管道数据
wc /etc/passwd                 // 读取文件
</code></pre>

<h3>将文本文件编页 <strong>pr</strong></h3>

<p>pr命令的作用是将文本文件编页，然后供打印用。</p>

<p>pr读取指定的文件，如果未给予指定文件，则读取标准输入，再将编页完成的数据写到标准输出。</p>

<h4>常用选项</h4>

<ul>
<li>-cn 产生n栏输出，等同<code>-n</code></li>
<li>-f 在首页之后的每一页标题前置一个ASCII分页字符</li>
<li>-h althdr 将页标题内的文件名称，改用<code>althdr</code>取代</li>
<li>-ln 产生<code>n</code>行页面</li>
<li>-on 输出位移<code>n</code>非空白</li>
<li>-t 不显示标题</li>
<li>-wn 每行至多<code>n</code>个字符</li>
</ul>


<h4>使用示例</h4>

<pre><code>pr -f -l60 -o10 -w65 file(s) | lp
// 产生60行页面，输出位移10个字符，每行至多65个字符
</code></pre>

<h3>提取开头和结尾数行 <strong>head tail</strong></h3>

<p>head和tail分别提取指定文件的开头和结尾数行。</p>

<h4>常用选项</h4>

<ul>
<li>-n n 开头或者结尾<code>n</code>行</li>
<li>-f 当需要监控某个文件的输出（如日志这类持续写入状态的文件），它可以要求tail显示指定的文件结尾行数，接着进入无止尽的循环中，<strong>休息一秒之后再度醒来并检查是否需显示更多的输出结果</strong>。在设置<code>-f</code>的状态下，<code>tail</code>只有当你中断它时才会停止，通常输出<code>Ctrl-C</code>来中断。</li>
</ul>


<h4>使用示例</h4>

<pre><code>// 不会自己中断，所以此选项不可用于Shell脚本
tail -n25 -f /var/log/messages
</code></pre>

<h3>strings</h3>

<h3>file</h3>

<h3>dd</h3>

<h3>vgrind</h3>

<p>过滤以各种程序语言构成的文件，将它们转换为troff输入。</p>

<h3>tgrind</h3>

<p>产生的是TEX输入，可迅速产生PostScript与PDF输出。</p>

<h3>diff</h3>

<h3>ASCII和八进制打印工具 <strong>od</strong></h3>

<h3>gsub() 全局性替换</h3>

<h3>RS 输入数据的记录分隔器</h3>

<h3>ORS 输出数据的记录分隔器</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSP页面刷新]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/25/html-page-refresh/"/>
    <updated>2013-06-25T21:33:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/25/html-page-refresh</id>
    <content type="html"><![CDATA[<h2>JSP页面刷新</h2>

<p>下面总结JSP页面中的三种刷新方法：</p>

<h3>在html中设置</h3>

<p>在</p>

<pre><code>&lt;title&gt;bd17kaka&lt;/title&gt;
</code></pre>

<p>之後加入下面这一行即可：</p>

<pre><code>&lt;META HTTP-EQUIV="Refresh" content="10"&gt;
</code></pre>

<p>意思是每10秒钟刷新一次页面。</p>

<h3>在JSP页面中设置</h3>

<p>加入</p>

<pre><code>&lt;% response.setHeader("refresh","1"); %&gt;
</code></pre>

<p>即可，意思是每一秒钟刷新一次。</p>

<p>也可以这样，使页面跳转到另外一个页面：</p>

<pre><code>&lt;%  
    response.setHeader("refresh","30;URL=http://www.sina.com");  
%&gt;
</code></pre>

<h3>使用JS</h3>

<p>加入如下JS代码：</p>

<pre><code>&lt;script language="javascript"&gt;
    setTimeout("self.location.reload();",1000);
&lt;script&gt;
</code></pre>

<p>意思是每一秒钟刷新一次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA中的浅拷贝和深拷贝]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/25/java-deep-copy/"/>
    <updated>2013-06-25T21:32:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/25/java-deep-copy</id>
    <content type="html"><![CDATA[<h2>JAVA中的浅拷贝和深拷贝(shallow copy and deep copy)</h2>

<h3>一个示例</h3>

<p>首先要区分&#8221;copy a value&#8221;和&#8221;copy an object&#8221;之间的区别：</p>

<pre><code>// copy a value
int val   = 1;
int cpVal = val;

// copy a value(the object reference for the array above)
int[] val   = new int[]{42};
int[] cpVal = val;

// copy a object
StringBuffer object   = new StringBuffer("I am a object");
StringBuffer cpObject = new StringBuffer(object);
</code></pre>

<p>简单的说，赋值操作都是&#8221;copy a value&#8221;。如果想要&#8221;copy an object&#8221;，需要显式的或者在内部进行类似&#8221;new&#8221;的操作。</p>

<!-- more -->


<h3>对象(object)的浅拷贝和深拷贝</h3>

<p>浅拷贝意味着仅仅拷贝对象的一层，而深拷贝意味着拷贝对象多于一层的数据。那么问题就是，怎么去定义一层？</p>

<p>考虑下面的例子：</p>

<pre><code>public class Example {
    public int foo;
    public int[] bar;
    public Example() { };
    public Example(int foo, int[] bar) { this.foo = foo; this.bar = bar; };
}

Example eg1 = new Example(1, new int[]{1, 2});
</code></pre>

<p>下面两个例子分别执行了对eg1的<strong>浅拷贝和深拷贝</strong>：</p>

<pre><code>Example eg2 = new Example(eg1.foo, eg1.bar);
Example eg2 = new Example(eg1.foo, Arrays.copy(eg1.bar));
</code></pre>

<h3>clone方法</h3>

<p>每一个类和array都包含这个方法，它的功能是创建目的对象的一个拷贝，然而要注意以下几点：</p>

<ul>
<li>deep无法确定到底是多少层？两层？三层？还是所有链接的对象</li>
<li>实际上，文档并没有说明clone是否创建一个新的对象</li>
</ul>


<p>下面是javadoc对于clone的解释：</p>

<pre><code>"Creates and returns a copy of this object. 
The precise meaning of "copy" 
may depend on the class of the object. 

The general intent is that, for any object x, 
the expression x.clone() != x will be true, 
and that 
the expression x.clone().getClass() == x.getClass() 
will be true, 
but these are not absolute requirements. 

While it is typically the case that 
x.clone().equals(x) will be true, 
this is not an absolute requirement."
</code></pre>

<h3>Java List深拷贝实现</h3>

<p>使用List的addAll方法就可以deep copy源列表中的所有元素(前提是list内部元素执行浅拷贝即可)：</p>

<pre><code>public static void main(String[] args) {

    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("1");
    list.add("2");

    // 创建dest list，将源list的所有值都拷贝过去
    List&lt;String&gt; dest = new ArrayList&lt;String&gt;();
    dest.addAll(list);

    // 在dest list中添加一个元素，修改一个元素
    dest.add("3");
    dest.set(0, "2");

    // 打印两个数组
    for (String item : list) {
        System.out.println(item);
    }
    System.out.println("--------------------------------");
    for (String item : dest) {
        System.out.println(item);
    }
    System.out.println("--------------------------------");
}
</code></pre>

<p>输出：</p>

<pre><code>1
2
--------------------------------
2
2
3
--------------------------------
</code></pre>

<h3>参考</h3>

<p><a href="http://stackoverflow.com/questions/6182565/java-deep-copy-shallow-copy-clone">Java :deep copy, shallow copy, clone</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA HashTable & HashMap & ...]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/14/java-hashtable-hashmap/"/>
    <updated>2013-06-14T22:05:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/14/java-hashtable-hashmap</id>
    <content type="html"><![CDATA[<h2>HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap</h2>

<p>经常用到HashMap，也经常听到HashTable和HashMap之间的故事，故google了一番，总结一下常用的各种Map。</p>

<h3>概述</h3>

<p>HashMap：实现上和HashTable相似，并且keys和values是无序的</p>

<p>TreeMap：基于红黑树结构实现，并且key是排好序的</p>

<p>LinkedHashMap：保持插入时的顺序</p>

<p>HashTable：和HashMap相比，是线程安全的</p>

<p>ConcurrentHashMap：相比HashMap，是线程安全的，但是推荐使用它来替代HashTable，因为性能更高，具体见后面</p>

<!-- more -->


<h3>HashMap</h3>

<p>如果HashMap的key是自定义的话，需要重载hashcode和equals方法。因为在HashMap中，不允许有两个完全相同的元素的存在。默认情况下，会使用Object类的hashcode和equals方法。其中，hashcode方法中，不同的对象返回不一样的整数，equals方法只在两个对象引用同一个对象时返回true。</p>

<p>在<a href="http://www.programcreek.com/2011/07/java-equals-and-hashcode-contract/">参考2</a>中，详细讲解了hashcode和equals的原理：</p>

<pre><code>在一个HashMap中查找一个元素的时候，
首先会调用HashCode方法，寻找相应的桶位，
然后在这个桶对应的array中，线性寻找，调用equals方法进行比较，
直到遍历完这个array，或者找到待查的元素。
另外，在该示例中，详细给出了equals和hashcode方法是实现示例。
</code></pre>

<h3>HashMap vs HashTable</h3>

<p>经常听到关于HashMap和HashTable的言论，Java Doc上说：</p>

<pre><code>From Java Doc:  The HashMap class is roughly equivalent to Hashtable, 
except that it is unsynchronized and permits nulls.
</code></pre>

<p>也就是说，两者几乎是一样的一样的，只是HashMap不是线程安全的，并且允许在keys和values中出现null值。</p>

<p>而java5中，也用ConcurrentHashMap来替代了HashTable，两者使用的锁机制是不一样的。</p>

<p>Hashtable中采用的锁机制是一次锁住整个hash表，从而同一时刻只能由一个线程对其进行操作；而ConcurrentHashMap中则是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get,put,remove等常用操作只锁当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。上面说到的16个线程指的是写线程，而读操作大部分时候都不需要用到锁。只有在size等操作时才需要锁住整个hash表。</p>

<h3>TreeMap</h3>

<p>TreeMap是根据key来进行排序的，必须实现Comparable接口，实现其中的方法：</p>

<pre><code>@Override
public int compareTo(Dog o) {
    return  o.size - this.size;
}
</code></pre>

<p>具体事例见<a href="http://java.dzone.com/articles/hashmap-vs-treemap-vs">参考1</a>。</p>

<h3>LinkedHashMap</h3>

<p>LinkedHashMap是HashMap的子类，意味着它继承了HashMap的属性。除此之外，它保存了元素插入的顺序。</p>

<h3>参考</h3>

<ol>
<li><a href="http://java.dzone.com/articles/hashmap-vs-treemap-vs">HashMap vs. TreeMap vs. HashTable vs. LinkedHashMap</a></li>
<li><a href="http://www.programcreek.com/2011/07/java-equals-and-hashcode-contract/">Java equals() and hashCode() Contract – Code Example</a></li>
<li><a href="http://developer.51cto.com/art/201102/246431.htm">Hashtable和HashMap引发的血案</a></li>
<li><a href="http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable">Differences between HashMap and Hashtable?</a></li>
<li><a href="http://blog.csdn.net/itm_hadf/article/details/7506529">java集合框架【3】 java1.5新特性 ConcurrentHashMap、Collections.synchronizedMap、Hashtable讨论</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5157093c0100hm3y.html">SynchronizedMap和ConcurrentHashMap的深入分析</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java定时任务]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/14/java-schedule-task/"/>
    <updated>2013-06-14T21:56:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/14/java-schedule-task</id>
    <content type="html"><![CDATA[<h2>定时任务</h2>

<h3>关于定时任务</h3>

<p>定时任务有两种：</p>

<ul>
<li>固定延时的定时任务，即一个任务结束等待固定时间后再执行下一个；</li>
<li>固定频率的定时任务，即任务在固定时常后开始执行。</li>
</ul>


<p>前者的意思是，任务完成之后，等待固定的诗句再执行下一个；而后者的意思是在固定的时间执行任务，如果前一次任务的结束时间已经超过了下一次任务开始的时间，那么就会立即执行。</p>

<!-- more -->


<h3>定时任务实现方案</h3>

<p>Timer和ScheduledThreadPoolExecutor都可以完成定时任务的工作，也都支持上面的两种方式。</p>

<p>下面分别给出两个类的示例：</p>

<pre><code>package com.concurrent.basic;
import java.util.Timer;
import java.util.TimerTask;
public class TimerTest {
    private Timer timer = new Timer();

    // 启动计时器
    public void lanuchTimer() {
        timer.schedule(new TimerTask() {
            public void run() {
                // do sth...
            }
        }, 1000 * 3, 500);
    }

    public static void main(String[] args) throws Exception {
        TimerTest test = new TimerTest();
        test.lanuchTimer();
    }
}
</code></pre>

<p>这个例子是固定延时的任务，详细文档见<a href="http://docs.oracle.com/javase/7/docs/api/">Timer</a>，文档中，也有scheduleAtFixedRate方法来调用固定频率的任务。</p>

<pre><code>package com.concurrent.basic;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ScheduledExecutorTest {

    public ScheduledExecutorService scheduExec = Executors
            .newScheduledThreadPool(1);

    // 启动计时器
    public void lanuchTimer() {
        Runnable task = new Runnable() {
            public void run() {
                // do sth...
            }
        };
        scheduExec.scheduleWithFixedDelay(task, 1000 * 5, 1000 * 10,
                TimeUnit.MILLISECONDS);
    }

    public static void main(String[] args) throws Exception {
        ScheduledExecutorTest test = new ScheduledExecutorTest();
        test.lanuchTimer();
    }
}
</code></pre>

<p>这个例子是固定延时的任务示例，也可以调用scheduleAtFixedRate方法来启用固定频率的任务。</p>

<h3>比较</h3>

<ul>
<li>Timer对系统时钟是敏感的，而ScheduledThreadPoolExecutor不是；</li>
<li>Timer只有一个执行线程，所以如果一个线程延时太久了，会影响其他的固定延时任务。而ScheduledThreadPoolExecutor可以配置任意数量的线程，并且你可以完成控制你所创建的这些线程；</li>
<li><em>在Timer中，运行时错误会直接杀死线程，也就会导致线程挂掉，后面计划的任务也不会执行。ScheduledThreadPoolExecutor不仅可以给你catch住运行时异常，还可以对它们进行处理。抛出异常的任务会挂掉，但是其他的定时任务会继续执行。</em></li>
</ul>


<h3>相关链接</h3>

<ul>
<li><a href="http://marshal.easymorse.com/archives/3136">通过java concurrent实现定时任务</a></li>
<li><a href="http://batitan.iteye.com/blog/253483">定时任务:Java中Timer和TimerTask的使用</a></li>
<li><a href="http://stackoverflow.com/questions/409932/java-timer-vs-executorservice">Java Timer vs ExecutorService?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js cross domain post]]></title>
    <link href="http://zhangdian.github.com/blog/2013/05/28/js-cross-domain-post/"/>
    <updated>2013-05-28T00:47:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/05/28/js-cross-domain-post</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring WEB MVC总结]]></title>
    <link href="http://zhangdian.github.com/blog/2013/05/27/spring-web-mvc/"/>
    <updated>2013-05-27T00:26:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/05/27/spring-web-mvc</id>
    <content type="html"><![CDATA[<p>用了这么久的spring web，终于把官方的文档看了看，总结出来下面的文档。</p>

<!-- more -->


<h4>Spring WEB MVC的特性</h4>

<ul>
<li>角色分明：controller、validator、command object、form object、model object、DispatcherServlet、handler mapping、view resolver等等，每个角色都可以由一个专门的对象来实现；</li>
<li>框架和类似JavaBean应用类的强大而简单的配置；</li>
<li>适配性、非侵入性以及灵活性。可以任意定义controller方法的前面，对于指定的场景，可以使用@RequestParam、@RequestHeader、@PathVariable其中的一个；</li>
<li>可重用的业务代码；</li>
<li>可定制话的绑定和验证；</li>
<li>类型匹配错误作为应用层的验证错误，取代手动将传进来的String-Only对象parse and convert成为业务对象；</li>
<li>个性化handler mapping以及view resolution；</li>
<li>灵活的model解析。利用name/value Map，可以利用任意一种view技术解析model；</li>
<li>个性化的locale以及theme resolution。支持JSPs，包不包含Spring tag lib，JSTL都行；</li>
<li>等等</li>
</ul>


<h4>其他MVC实现的可插入性</h4>

<p>如果不想使用Spring web MVC，而是想在其他类似struts、WebWork的框架中使用Spring的某些特性，这也是可以的，具体的可以查看相关文档。</p>

<h4>1. DispatcherServlet类</h4>

<p>和其他的MVC框架一样，Spring web MVC也是基于<strong>请求驱动</strong>的模型，围绕一个核心的servlet，将所有的请求分发到Controllers，同时提供丰富的功能，来帮助web应用程序的开发。Spring完全集成Spring IoC容器，允许你使用Spring所拥有的任何特性。</p>

<p>下图是Spring web MVC中的请求处理流程图：</p>

<p><img src="https://dl.dropboxusercontent.com/u/99113526/blog.bd17kaka.net/spring-web-mvc.png"></p>

<p>DispatcherServlet是Servlet类的一个子类，继承自HttpServlet，它在web.xml文件中进行定义。需要通过使用URL映射，来将需要其处理的请求映射到这个Servlet。下面是一个标准的servlet配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- web.xml --&gt;
</span><span class='line'>&lt;web-app&gt;
</span><span class='line'>
</span><span class='line'>    &lt;servlet&gt;
</span><span class='line'>        &lt;servlet-name&gt;example&lt;/servlet-name&gt;
</span><span class='line'>        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
</span><span class='line'>        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</span><span class='line'>    &lt;/servlet&gt;
</span><span class='line'>
</span><span class='line'>    &lt;servlet-mapping&gt;
</span><span class='line'>        &lt;servlet-name&gt;example&lt;/servlet-name&gt;
</span><span class='line'>        &lt;url-pattern&gt;*.form&lt;/url-pattern&gt;
</span><span class='line'>    &lt;/servlet-mapping&gt;
</span><span class='line'>
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<p>额外的参数：contextClass、contextConfigLocation、namespace，具体解释见原文。</p>

<p>在这个例子中，所有满足表达式“*.form”的请求，都将有servlet-name为“example”的这个servlet来进行处理。</p>

<p>在Spring中，ApplicationContext实例是有作用域的。在Web MVC架构中，每一个DispatcherServlet类都有它自己的WebApplicationContext，这个WebApplicationContext继承所有已经在根部的WebApplicationContext中所定义的beans。这些beans是可以被在servlet中定义的beans所覆盖的。（不太懂，得看看Spring Ioc）</p>

<p>在DispatcherServlet初始化的时候，Spring在文件夹WEB-INF中查找文件名为[servlet-name]-servlet.xml的文件，并且创建那个文件里面定义的所有beans。将在全局作用域中，有相同名称的bean全覆盖掉。</p>

<p>考虑上面的那个web.xml定义，那么需要在WEB-INF文件夹中，创建一个名为example-servlet.xml的文件，这个里面包含所有Spring WEB MVC所拥有的beans。</p>

<p><strong>我的理解是：一个web.xml文件中可以定义多个servlet；一个servlet对应一个example-servlet.xml文件；一个example-servlet.xml文件就是一个WebApplicationContext。</strong></p>

<p>在WebApplicationContext中，包含下面这些类型的beans：</p>

<ul>
<li>controllers</li>
<li>handler mappings</li>
<li>view resolvers</li>
<li>locale resolvers</li>
<li>theme resolver</li>
<li>multipart file resolver</li>
<li>handler exception resolvers</li>
</ul>


<p>当有一个请求到来的时候，DispatcherServlet是按照以下的顺序来处理这个请求的：</p>

<ul>
<li>搜索WebApplicationContext，并且将其作为一个attribute绑定到request中，这样，在这个过程中，controller和其他的元素都可以使用。默认情况下，它被绑定在DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE里面；</li>
<li>locale resolver绑定到request中，这样，其他的元素可以解析并使用locale（呈现view、准备数据等等）。如果你不需要locale resolving，那么就不需要他它；</li>
<li>theme resolver绑定到request中，允许views等元素决定使用哪个theme。如果不需要themes，可以忽略它；</li>
<li>如果指定了一个multipart file resolver，那么这个请求就被看做multipart。如果找到了multipart，就会将这个请求包装成一个MultipartHttpServletRequest，再由其它元素进行进一步的处理；</li>
<li>搜索一个合适的handler。如果找到了，那个和这个handler相关的执行链（preprocessors, postprocessors, and controllers）会被执行，以准备model以及呈现；</li>
<li>如果返回了一个model，那么会呈现一个view；如果没有model返回，那么不会呈现任何view，因为请求以及被执行完毕了。</li>
</ul>


<p>在WebApplicationContext中声明的Handler exception resolvers对象，接收在请求处理过程中产生的所有错误。用这些exception resolvers可以使对于不同的exception定义个性化的处理办法。</p>

<h4>2. Controllers</h4>

<p>controllers获取用户的输入，并且在处理之后，将其转换为model，进而转换为view，展现给用户。Spring提供的controller是非常抽象化的，可以定义各种各样、大量的controllers。</p>

<p>Spring2.5引入基于注解的编程模型，可以使用诸如@RequestMapping、@RequestParam、@ModelAttribute等注解。它同时支持Servlet MVC和Potlet MVC。这种情况下，不需要事先指定的基类或者指定的接口。下面是一个简单的例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>public class HelloWorldController {
</span><span class='line'>
</span><span class='line'>    @RequestMapping("/helloWorld")
</span><span class='line'>    public ModelAndView helloWorld() {
</span><span class='line'>        ModelAndView mav = new ModelAndView();
</span><span class='line'>        mav.setViewName("helloWorld");
</span><span class='line'>        mav.addObject("message", "Hello World!");
</span><span class='line'>        return mav;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h5>2.1 使用@controller定义一个controller</h5>

<p>@controller标签定义一个执行controller功能的类，在Spring里面，不需要继承任何的controller基类，或者调用ServletAPI，不过，如果有需要的话，也可以调用Servlet指定的特性。</p>

<p>@controller作为被注解的类的签名，标示这个类的角色。Dispatcher类扫描以@controller做注解的类，然后寻找以@RequestMapping做注解的方法。</p>

<p>我们可以严格的对controller类使用@controller注解，但是@controller标签页支持自动搜索，依赖于Spring支持在classpath中自动搜索组件类，以及为他们完成自动注册的bean的定义。</p>

<p>只需要将扫描组件添加到配置中，即可启用自动扫描这样的注解controller的功能：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;beans xmlns="http://www.springframework.org/schema/beans" 
</span><span class='line'>    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>    xmlns:p="http://www.springframework.org/schema/p" 
</span><span class='line'>    xmlns:context="http://www.springframework.org/schema/context"
</span><span class='line'>    xsi:schemaLocation="
</span><span class='line'>        http://www.springframework.org/schema/beans 
</span><span class='line'>        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
</span><span class='line'>        http://www.springframework.org/schema/context 
</span><span class='line'>        http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;context:component-scan base-package="org.springframework.samples.petclinic.web"/&gt;
</span><span class='line'>
</span><span class='line'>    // ...
</span><span class='line'>
</span><span class='line'>&lt;/beans&gt;</span></code></pre></td></tr></table></div></figure>


<h5>2.2 利用@RequestMapping来匹配请求</h5>

<p>我们可以用类似于“/handler”的注解来匹配整个类，也可以只匹配某个函数。比如，对于一个指定的HTTP请求（GET/POST）或者一个HTTP请求参数，我们经常用一个<strong>类级别</strong>的注解来将一个指定的请求映射到一个表单controller，然后使用一个额外的<strong>方法级别</strong>的注解来缩小范围。下面是一个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@RequestMapping("/handler")
</span><span class='line'>public class AppointmentsController {
</span><span class='line'>
</span><span class='line'>    private final AppointmentBook appointmentBook;
</span><span class='line'>    
</span><span class='line'>    @Autowired
</span><span class='line'>    public AppointmentsController(AppointmentBook appointmentBook) {
</span><span class='line'>        this.appointmentBook = appointmentBook;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @RequestMapping(method = RequestMethod.GET)
</span><span class='line'>    public Map&lt;String, Appointment&gt; get() {
</span><span class='line'>        return appointmentBook.getAppointmentsForToday();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @RequestMapping(value="/{day}", method = RequestMethod.GET)
</span><span class='line'>    public Map&lt;String, Appointment&gt; getForDay(@PathVariable @DateTimeFormat(iso=ISO.DATE) Date day, Model model) {
</span><span class='line'>        return appointmentBook.getAppointmentsForDay(day);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @RequestMapping(value="/new", method = RequestMethod.GET)
</span><span class='line'>    public AppointmentForm getNewForm() {
</span><span class='line'>        return new AppointmentForm();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @RequestMapping(method = RequestMethod.POST)
</span><span class='line'>    public String add(@Valid AppointmentForm appointment, BindingResult result) {
</span><span class='line'>        if (result.hasErrors()) {
</span><span class='line'>            return "appointments/new";
</span><span class='line'>        }
</span><span class='line'>        appointmentBook.addAppointment(appointment);
</span><span class='line'>        return "redirect:/appointments";
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>类级别的@RequestMapping注解并不是必须的，没有它的话，所有路径都是绝对路径，而不是相对路径。</p>

<p>这里有一个当使用proxy时，关于@controller注解类的小陷阱，具体内容见原文。</p>

<h6>2.2.1 URI模板</h6>

<p>如果想要访问URL中的某个部分，那么就可以在@RequestMapping的路径变量中使用URL模板。</p>

<p>在函数中使用@PathVariable注解时，意味着函数的这个变量需要绑定到URI模板变量的某个部分。</p>

<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RequestMapping(value="/owners/__{ownerId}__", method=RequestMethod.GET)
</span><span class='line'>public String findOwner(@PathVariable String ownerId, Model model) {
</span><span class='line'>  Owner owner = ownerService.findOwner(ownerId);  
</span><span class='line'>  model.addAttribute("owner", owner);  
</span><span class='line'>  return "displayOwner"; 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果代码编译是在启用debugging模式下进行的，那么路径中的ownerId的值会被设置到函数变量ownerId中；如果没有启用debugging模式，那么必须给函数变量指定它要映射到的路径变量的名称，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RequestMapping(value="/owners/{ownerId}", method=RequestMethod.GET)
</span><span class='line'>public String findOwner(__@PathVariable("ownerId")__ String ownerId, Model model) {
</span><span class='line'>  // implementation omitted
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，在没有启用debugging模式的时候，路径中的变量是可以和函数声明中的变量按名称来进行匹对，进而赋值的；在没有启用debugging模式的时候，必须要指定与函数签名中的变量进行匹对的路径中的变量的名称。所以在没有启用debugging的时候，下面的写法也是而已的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RequestMapping(value="/owners/{ownerId}", method=RequestMethod.GET)
</span><span class='line'>public String findOwner(@PathVariable("ownerId") String __theOwner__, Model model) {
</span><span class='line'>  // implementation omitted
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当然也可以指定多个路径变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@RequestMapping(value="__/owners/{ownerId}/pets/{petId}__", method=RequestMethod.GET)
</span><span class='line'>public String findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {
</span><span class='line'>  Owner owner = ownerService.findOwner(ownderId);  
</span><span class='line'>  Pet pet = owner.getPet(petId);  
</span><span class='line'>  model.addAttribute("pet", pet);  
</span><span class='line'>  return "displayPet"; 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>下面的实例演示了相对路径的用法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@RequestMapping("/owners/{ownerId}")
</span><span class='line'>public class RelativePathUriTemplateController {
</span><span class='line'>
</span><span class='line'>  @RequestMapping("/pets/{petId}")
</span><span class='line'>  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {    
</span><span class='line'>    // implementation omitted
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：@PathVariable中声明的变量可以是任意类型的，Spring会进行自动的类型转换，如果转换失败的话，会抛出TypeMismatchException异常。我们也可以通过定制data binder来定制这个转换的过程，具体见后面。</strong></p>

<h6>2.2.2 @RequestMapping的更多选项</h6>

<p>除了URI模板之外，@RequestMapping同样支持正则，比如<code>/myPath/*.do</code>，URI路径和正则的组合也是支持的（<code>/owners/*/pets/{petId}</code>）。</p>

<p>如果没有严格匹配的方法来处理请求，那么处理方法的名称用于缩小范围。如果有多个这样的方法，那么就会在这些方法里面进行选择。</p>

<p>可以通过类似于<code>myParam=myValue</code>的参数条件来缩小路径匹配的范围。比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@RequestMapping("/owners/{ownerId}")
</span><span class='line'>public class RelativePathUriTemplateController {
</span><span class='line'>
</span><span class='line'>  @RequestMapping(value = "/pets/{petId}", __params="myParam=myValue"__)
</span><span class='line'>  public void findPet(@PathVariable String ownerId, @PathVariable String petId, Model model) {    
</span><span class='line'>    // implementation omitted
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>“myParam”这种形式的表达式也是允许的，意思是参数myParam存在于请求路径中，同样的，“！myParam”的意思是参数myParam不存在与请求路径中。</p>

<p>相似的，也可以通过比较header的信息来缩小路径匹配的范围：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@RequestMapping("/owners/{ownerId}")
</span><span class='line'>public class RelativePathUriTemplateController {
</span><span class='line'>
</span><span class='line'>@RequestMapping(value = "/pets", method = RequestMethod.POST, __headers="content-type=text/*"__)
</span><span class='line'>  public void addPet(Pet pet, @PathVariable String ownerId) {    
</span><span class='line'>    // implementation omitted
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h6>2.2.3 处理方法支持的参数和返回值类型</h6>

<p>被@RequestMapping注解的处理方法可以有非常灵活的签名，他们中的很多都可以以任意的顺序所使用。</p>

<ul>
<li>Request和Response对象（Servlet API）：选择任意指定的request或者response类型，比如ServletRequest和HttpServletRequest；</li>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring ioc]]></title>
    <link href="http://zhangdian.github.com/blog/2013/05/27/spring-ioc/"/>
    <updated>2013-05-27T00:26:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/05/27/spring-ioc</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JS跨域(Get)]]></title>
    <link href="http://zhangdian.github.com/blog/2013/05/25/js-cross-domain/"/>
    <updated>2013-05-25T00:14:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/05/25/js-cross-domain</id>
    <content type="html"><![CDATA[<h4>什么是跨域</h4>

<p>在JavaScript中，有一个很重要的安全性限制，被称为“Same-Origin Policy”（同源策略）。这一策略对于JavaScript代码能够访问的页面内容做了很重要的限制，即JavaScript只能访问与包含它的文档在同一域下的内容。</p>

<p>所谓同源是指，<strong>域名，协议，端口</strong>相同。</p>

<!-- more -->


<h4>JSONP解决跨域的问题</h4>

<p>JSON(JavaScript Object Notation), JSONP(JSON with Padding)</p>

<p>在同源策略下，在某个服务器下的页面是无法获取到该服务器以外的数据的。</p>

<p><strong>但img、iframe、script等标签是个例外，这些标签可以通过src属性请求到其他服务器上的数据。利用script标签的开放策略，我们可以实现跨域请求数据，当然，也需要服务端的配合。</strong></p>

<p>当我们正常地请求一个JSON数据的时候，服务端返回的是一串JSON类型的数据，而我们使用JSONP模式来请求数据的时候，服务端返回的是一段可执行的JavaScript代码。</p>

<h5>请求JSON数据</h5>

<p>URL     http://lifeblog.bd17kaka.net/json?id=123</p>

<p>返回数据    {&#8220;id&#8221;: 123, &#8220;name&#8221; : &#8220;json&#8221;}</p>

<h5>请求JSONP数据</h5>

<p>URL     http://lifeblog.bd17kaka.net/json?id=123&amp;callback=cb</p>

<p>返回数据    cb({&#8220;id&#8221;: 123, &#8220;name&#8221; : &#8220;json&#8221;});</p>

<p>上述返回数据包含一段可以执行的代码，客户端应该有cb这个函数。当然，更好返回值写法应该是：
try{cb({&#8220;id&#8221;: 123, &#8220;name&#8221; : &#8220;json&#8221;});}catch(e){}</p>

<h4>解决方案</h4>

<p>动态创建一个script标签，src地址是要访问的地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript" src="http://lifeblog.bd17kaka.net/json?id=123&callback=cb"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>服务器接收到请求，返回如下格式的字符串，包含一段可执行的JS代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try{cb({"id": 123, "name" : "json"});}catch(e){}</span></code></pre></td></tr></table></div></figure>


<p>客户端创建一个cb函数，接收参数，进行相应的处理。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function cb(data) {alert(data);}</span></code></pre></td></tr></table></div></figure>


<h4>JQUERY解决方案</h4>

<h5>在AJAX中，将dataType设置为“jsonp”</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$.ajax({
</span><span class='line'>        dataType: 'jsonp',
</span><span class='line'>        url: 'http://lifeblog.bd17kaka.net/json?id=123',
</span><span class='line'>        success: function(data){
</span><span class='line'>          
</span><span class='line'>        }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h5>使用getJson方法，在地址中加上callback参数，客户端需要有这个callback的实现</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$.getJSON('http://lifeblog.bd17kaka.net/json?id=123&callback=cb', function(data){
</span><span class='line'>  cb(data);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h5>使用getScript方法</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function foo(data){
</span><span class='line'>        //处理data数据
</span><span class='line'>}
</span><span class='line'>$.getScript('http://lifeblog.bd17kaka.net/json?id=123&callback=cb');</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<ul>
<li><a href="http://www.clanfei.com/2012/08/1637.html">jQuery中利用JSONP解决AJAX跨域问题</a></li>
<li><a href="http://www.cnblogs.com/chopper/archive/2012/03/24/2403945.html">深入浅出JSONP&#8211;解决ajax跨域问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[call java in nodejs]]></title>
    <link href="http://zhangdian.github.com/blog/2013/05/02/call-java-in-nodejs/"/>
    <updated>2013-05-02T22:43:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/05/02/call-java-in-nodejs</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux上常见DNS记录查询]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/16/dns-lookup-cmds-in-linux/"/>
    <updated>2013-04-16T09:40:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/16/dns-lookup-cmds-in-linux</id>
    <content type="html"><![CDATA[<p>首先介绍一个查询DNS记录很好的网站：<a href="http://mxtoolbox.com/SuperTool.aspx">MXToolBox</a></p>

<p>查询DKIM记录：dig TXT + short mail._domainkey.domain.com</p>

<p>查询SPF记录：dig TXT +short domain.com</p>

<p>查询MX记录：dig MX domain.com</p>

<p>查询A记录：dig A domain.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是邮件信誉度]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/08/what-is-email-reputation/"/>
    <updated>2013-04-08T22:22:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/08/what-is-email-reputation</id>
    <content type="html"><![CDATA[<h5>什么是邮件信誉度</h5>

<p>邮件信誉度就想信用卡积分一样，你有一个初始值，需要一段时间慢慢积攒成一个好的信誉度，也有可能一瞬间摧毁你的信誉度。所以，即使你有一个好的信誉度，也不意味着你可以做任意的事情。</p>

<h5>什么会影响邮件信誉度</h5>

<p>以下这些因素经常被反垃圾邮件工具用来作为标准：</p>

<ul>
<li>用户report spam的数量</li>
<li>发往不存在邮箱地址的邮件比例</li>
<li>命中spam trap的频率</li>
<li>邮件发出去多长时间，邮件接收者就点击取消订阅</li>
<li>容量，邮件发送频率已经邮件发送量</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux crontab]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/08/linux-crontab/"/>
    <updated>2013-04-08T22:21:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/08/linux-crontab</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to improve email reputation]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/07/how-to-improve-email-reputation/"/>
    <updated>2013-04-07T22:05:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/07/how-to-improve-email-reputation</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邮件验证]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/07/email-authentation/"/>
    <updated>2013-04-07T22:04:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/07/email-authentation</id>
    <content type="html"><![CDATA[<p>要想让邮件准确的到达目标客户的收件箱，最好的方法就是满足ISPs的需要，其中对邮件信息进行验证是很重要的部分。</p>

<!-- more -->


<h4>什么是邮件验证</h4>

<p>主要有三个部分的邮件验证：</p>

<h5>IP反解</h5>

<p>对于设置了反向解析的IP认为是固定IP，可以追查到使用人。如果发了大量垃圾邮件可以通知IP管理单位协助封停。而对于没有反向解的IP被认为是动态IP，或不可信IP，被大量用来发送垃圾邮件。</p>

<h5>SenderID / SPF</h5>

<p>SenderID和SPF是基于IP的验证。在这种验证机制中，Sender指定哪些IP是属于一个指定的域名的（Sender的域名）。</p>

<p>当一个Sender请求一个到ISP得连接的时候，这个ISP使用这个技术，到 DNS上查询这个IP是否在这个域名的SPF记录下面，也就是这个IP有没有使用这个域名发送邮件的权限。</p>

<p>Gmail和Yahoo会验证SPF，Hotmail会验证SenderID。
SPF和SenderID的区别是获取Sender的算法不同。</p>

<h5>Domain Keys / DKIM</h5>

<p>Domain Keys/DKIM是加密的邮件内容加密算法。在这种机制中，sender在邮件原文中添加一个DKIM-Signature字段，用于ISPs对接收到得内容进行验证。</p>

<p>ISP获取发送域名（DKIM-Signature中的h字段）和DKIM-Signature数字签名，执行一次DNS查询获取到公钥，然后进行邮件正文内容验证。</p>

<p>Gmail和Hotmail验证DKIM，yahoo验证Domain keys</p>

<h4>是否一定需要进行验证？</h4>

<p>如果你的消息没有进行任何验证，那么ISPs<strong>可能会</strong>拒绝连接。所以使用所有的验证机制是比较好的。</p>

<h4>使用了验证机制后，邮件就不会被拒绝了吗？</h4>

<p>ISPs主要还是使用你的IP和域名的<strong>信誉度</strong>来决定是否接受或者拒绝你的邮件，或者将邮件发送到收件箱还是垃圾箱。</p>

<p>验证机制可以帮助ISP来验证你的身份或者邮件内容，但是他并不能提高你的信誉度。</p>

<p>换句话说，验证不一定能提高你的邮件到达率。但是如果没有验证的话，即使你有一个很好的信誉度，也会影响到邮件的到达率。</p>

<h4>信誉度和验证</h4>

<p>上述的三种验证，只能验证IP是否是固定IP，IP是否有权限以声明为某域名发送邮件，邮件内容是否被纂改，但是不能确保你发送的邮件不是垃圾邮件等等。<strong>所以IP和域名的信誉度才是邮件到达率更关键的因素。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关注From Name信誉度]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/05/email-from-name-reputation/"/>
    <updated>2013-04-05T20:44:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/05/email-from-name-reputation</id>
    <content type="html"><![CDATA[<p>下面是对<a href="http://www.adstation.com/a-new-years-resolution-monitor-your-from-name-from-address-reputation/">A New Year’s Resolution: Monitor Your “From Name” (From Address) Reputation</a>的翻译和总结，是关于“关注From Name信誉度”的一篇文章。</p>

<!-- more -->


<p>在去年12月中旬，发现Yahoo开始将一些在白名单中的Sender发送的邮件，发送到垃圾箱中。通过分析了解到，Yahoo的这个策略几乎会影响使用多个“From Name”发送邮件的发送者。</p>

<ul>
<li>注意这里的“From Name”和“Friendly From Name”的区别：以发送地址“reputation &lt; bd17kaka@gmail.com > ”为例，“Friendly From Name”指的是“reputation”，“From Name”指的是bd17kaka。而Yahoo的这个变化时针对“From Name”的。</li>
</ul>


<h5>Yahoo做了什么改变</h5>

<p>Yahoo的信誉度规则发生了改变，从去年12月开始，Yahoo使用“From Name”+“Domain Name”+“IP”的组合来确定信誉度：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>“From Name + Domain Name + IP”</span></code></pre></td></tr></table></div></figure>


<p>同时也确定“Friendly From Name”和信誉度以及邮件是进入收件箱还是垃圾箱没有什么关系。</p>

<h5>影响了谁，谁需要改变</h5>

<ul>
<li>最近改变了From Name，并且没有为新的From Name建立信誉度；</li>
<li>使用多个From Name，并且任何一个From Name组合的信誉度都不满足Yahoo的需求；</li>
</ul>


<p>在以前，如果某一域名下的所有From Name的所有组合的平均信誉度是可以接受的话，邮件就会被发送到收件箱。经过这个改变之后，如果任何一个From Name的组合不是被接受的，那么这个组合发出来的邮件将不会被发送到收件箱。</p>

<p>考虑下面三个From Name：</p>

<ul>
<li>fromname_1@bd17kaka.net</li>
<li>fromname_2@bd17kaka.net</li>
<li>fromname_3@bd17kaka.net</li>
</ul>


<p>假设前两个From Name的组合满足Yahoo的要求，但是第三个FromName是不满足的，那么前两个From Name发出来的邮件会发送到收件箱，第三个From Name发出来的邮件会进入垃圾箱。</p>

<h5>如果From Name的信誉度很差，那么修改From Name会有帮助吗？</h5>

<p>直到新的From Name建立一个好的信誉度之前，修改From Name都没有什么帮助。如果你不提升你发送邮件的策略，那么新的FromName也不会有一个好的信誉度。</p>

<h5>Yahoo为什么做这个改变？</h5>

<p>发送者对于不同收件人列表，使用不同的FromName和相同的IP来发送邮件。对于建立了好的信誉度的部分，会给予奖励，相反会给予惩罚。</p>

<p>在以前，忽略FromName不管，如果一个发送者的平均信誉度满足Yahoo的要求，那么它是可以被接受的。可是现在不再是这样的了。</p>

<h5>原文链接</h5>

<p><a href="http://www.adstation.com/a-new-years-resolution-monitor-your-from-name-from-address-reputation/">Monitor Your “From Name” (From Address) Reputation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/02/mail-dkim-spf-ptr/"/>
    <updated>2013-04-02T23:36:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/02/mail-dkim-spf-ptr</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[email_user_reputation]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/02/email-user-reputation/"/>
    <updated>2013-04-02T23:27:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/02/email-user-reputation</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java_jti]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/02/java-jti/"/>
    <updated>2013-04-02T23:21:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/02/java-jti</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
