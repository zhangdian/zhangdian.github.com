<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bd17kaka's blog]]></title>
  <link href="http://zhangdian.github.com/atom.xml" rel="self"/>
  <link href="http://zhangdian.github.com/"/>
  <updated>2012-12-13T10:06:07+08:00</updated>
  <id>http://zhangdian.github.com/</id>
  <author>
    <name><![CDATA[bd17kaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis文档]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/13/redis-docs/"/>
    <updated>2012-12-13T09:27:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/13/redis-docs</id>
    <content type="html"><![CDATA[<h3>1. Redis介绍</h3>

<h4>1.1 什么是redis</h4>

<p>REmote DIctionary Server(Redis)是一个由Salvatore Sanfilippo写的key-value存储系统。Redis提供了一些丰富的数据结构，包括lists，sets，ordered sets以及hashes，当然还有和Memcached一样的strings结构。Redis当然还包括了对这些数据结构的丰富操作。</p>

<h4>1.2 redis的优点</h4>

<ul>
<li>性能极高：Redis能支持超过 100K+ 每秒的读写频率；</li>
<li>丰富的数据类型：Redis支持二进制安全的Strings，Lists，Hashes，Sets及Ordered Sets数据类型操作；</li>
<li><strong>原子性：Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行；</strong></li>
<li>丰富的特性：Redis还支持 publish/subscribe，通知，key过期等等特性。</li>
</ul>


<!-- more -->


<h3>2. Redis的数据类型</h3>

<p>redis使用的是key作为存取对象的唯一标识，对“key”的通俗理解就是“字符串”。在Redis中字符串又分为两类：二进制安全(Binary Safe)的和非二进制安全的，关于二进制安全的描述可以参考<a href="http://en.wikipedia.org/wiki/Binary_safe">binary safe</a>。Redis处理存储的内容时用的是二进制安全的字符串，而作为key使用的非二进制安全的。</p>

<h4>2.1 String</h4>

<h5>2.1.1 String的结构</h5>

<p>redis string的实现包含在sds.c文件中，redis string的定义在sdshdr.h文件中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct sdshdr {
</span><span class='line'>    long len;
</span><span class='line'>    long free;
</span><span class='line'>    char buf[];
</span><span class='line'>};
</span><span class='line'>// len代表buf中实际保存的字符串的长度，那么就可以再O(1)的时间内获取字符串的长度
</span><span class='line'>// free代表buf中还剩余的空间长度
</span><span class='line'>// 保存实际的字符串
</span><span class='line'>// len + free 等于buf数组的长度</span></code></pre></td></tr></table></div></figure>


<h5>2.1.2 String的创建</h5>

<p>在sds.h中定义了一个新的类型，实际上类型sds就是字符串指针的一个别名而已。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef char *sds;</span></code></pre></td></tr></table></div></figure>


<p>在sds.c中定义的sdsnewlen函数创建一个新的字符串：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sds sdsnewlen(const void *init, size_t initlen) {
</span><span class='line'>    struct sdshdr *sh;
</span><span class='line'>
</span><span class='line'>    sh = zmalloc(sizeof(struct sdshdr)+initlen+1);
</span><span class='line'>#ifdef SDS_ABORT_ON_OOM
</span><span class='line'>    if (sh == NULL) sdsOomAbort();
</span><span class='line'>#else
</span><span class='line'>    if (sh == NULL) return NULL;
</span><span class='line'>#endif
</span><span class='line'>    sh-&gt;len = initlen;
</span><span class='line'>    sh-&gt;free = 0;
</span><span class='line'>    if (initlen) {
</span><span class='line'>        if (init) memcpy(sh-&gt;buf, init, initlen);
</span><span class='line'>        else memset(sh-&gt;buf,0,initlen);
</span><span class='line'>    }
</span><span class='line'>    sh-&gt;buf[initlen] = '\0';
</span><span class='line'>    return (char*)sh-&gt;buf;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可以看到，函数介绍两个参数，一个是字符串指针，一个是字符串长度。然后分配一个地址空间，包括三个部分：struct sdshdr长度、字符串长度以及字符串最后的结尾符。最后对struct sdshdr的各个元素赋值，返回其buf部分，也就是实际的字符串。</p>

<p>假设使用如下代码初始化它，那么内存结构大概是下面这个样子的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 初始化
</span><span class='line'>sdsnewlen("bd17kaka", 8);
</span><span class='line'>
</span><span class='line'>// 结果
</span><span class='line'>-----------
</span><span class='line'>|8|0|bd17kaka|
</span><span class='line'>-----------
</span><span class='line'>^   ^
</span><span class='line'>sh  sh-&gt;buf
</span></code></pre></td></tr></table></div></figure>


<h5>2.1.3 通过buf指针获取sh指针</h5>

<p>从上面的内存结构图可以看到，buf的内存地址实际上只比sh的内存地址多了len和free两个变量的长度，也就是两个long的长度，实际上就是struct sdshdr的长度，那么可以通过以下方法获取sh的指针：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
</span><span class='line'>
</span><span class='line'>// 获取字符串的长度
</span><span class='line'>size_t sdslen(const sds s) {
</span><span class='line'>    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
</span><span class='line'>    return sh-&gt;len;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在redis源代码其他地方，可以经常看到这个技巧的使用。</p>

<h4>2.2 List</h4>

<h4>2.3 set（集合）</h4>

<h4>2.4 sorted set（有序集合）</h4>

<h4>2.5 hash</h4>

<h3>3. Publish/Subscribe</h3>

<h3>4. 数据过期</h3>

<h3>5. 事务性</h3>

<h3>6. 持久化</h3>

<h3>7. 管理</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置VPN]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/12/add-setup-vpn-server-and-client/"/>
    <updated>2012-12-12T16:58:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/12/add-setup-vpn-server-and-client</id>
    <content type="html"><![CDATA[<p>查找了半天的资料，终于在vps上设置好了vpn，在ubuntu中，ssh到服务器，在本地做一个代理，别的客户端就可以通过设置代理到这台机器翻墙了。</p>

<h4>1. 在vps上设置，以允许vpn</h4>

<h5>1.1 开启TUN-TAP</h5>

<p>首先确认你的vps的TUN-TAP是否开启，通过以下命令验证：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /dev/net/tun</span></code></pre></td></tr></table></div></figure>


<p>如果输出显示如下，那么说明你的是启用的。我的是没有启动的，然后去我的vps后台去enabled就好了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat: /dev/net/tun: File descriptor in bad state</span></code></pre></td></tr></table></div></figure>


<h5>1.2 升级系统，安装软件</h5>

<p>下一步就是升级系统，安装ppp、iptables和pptp：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum update -y
</span><span class='line'>yum install -y ppp iptables
</span><span class='line'>rpm -ivh http://acelnmp.googlecode.com/files/pptpd-1.3.4-1.rhel5.1.i386.rpm</span></code></pre></td></tr></table></div></figure>


<h5>1.3 配置pptp</h5>

<ul>
<li>编辑/etc/pptpd.conf文件，把下面字段前面的#去掉即可：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>localip 192.168.0.1
</span><span class='line'>remoteip 192.168.0.234-238,192.168.0.245</span></code></pre></td></tr></table></div></figure>


<ul>
<li>接下来再编辑/etc/ppp/options.pptpd，去掉ms-dns前面的#，并使用Google的NS，修改成如下字段：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ms-dns 8.8.8.8
</span><span class='line'>ms-dns 8.8.4.4</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置pptp VPN账号密码，需要编辑/etc/ppp/chap-secrets这个文件。我的设置是：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vpn pptpd vpn *</span></code></pre></td></tr></table></div></figure>


<h5>1.4 修改内核设置，使其支持转发</h5>

<p>编辑/etc/sysctl.conf文件，将“net.ipv4.ip_forward”的值设为1，变成下面的形式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>net.ipv4.ip_forward=1</span></code></pre></td></tr></table></div></figure>


<p>然后保存退出。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sysctl -p</span></code></pre></td></tr></table></div></figure>


<h5>1.5 设置转发规则</h5>

<p>经过前面的设置之后，我们vpn已经可以进行拨号了，但是还不能访问任何的网页，这里需要添加转发规则， 在命令行中输入：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</span></code></pre></td></tr></table></div></figure>


<p>注意这里的192.168.0.0/24是根据前面1.3的localip的设置得来的。还有就是这里的eth0，如果你的外网网卡不是eth0的话，要设置为相应的外网网卡。</p>

<p>然后保存iptables：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/iptables save</span></code></pre></td></tr></table></div></figure>


<h5>1.6 重启iptables和pptp</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/iptables restart
</span><span class='line'>/etc/init.d/pptpd restart</span></code></pre></td></tr></table></div></figure>


<h5>1.7 设置为自启动</h5>

<p>将pptp和iptables设置为开机自动运行，这样就不需要每次重启服务器后手动启动服务了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chkconfig pptpd on
</span><span class='line'>chkconfig iptables on</span></code></pre></td></tr></table></div></figure>


<h4>2. 客户端设置</h4>

<p>在一个机器上使用如下代码ssh到vps上，然后就可以把他当成一个代理了，然后任何计算机都可以设置代理到这个机器，就可以成功翻墙了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -qTfnN -D :7070 -g user@youdomain.com</span></code></pre></td></tr></table></div></figure>


<h4>3. 错误处理</h4>

<h5>3.1 错误619</h5>

<p>出现错误619的话，则输入以下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mknod /dev/ppp c 108 0</span></code></pre></td></tr></table></div></figure>


<h5>3.2 错误734</h5>

<p>出现“错误734：ppp链接控制协议终止”解决的方法是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/ppp/options.pptpd
</span><span class='line'>require-mppe-128 -&gt; # require-mppe-128
</span><span class='line'>拨号连接–&gt;安全–&gt;要求数据加密(没有就断开) 前面的勾取消</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用51.la统计网站流量]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/11/add-51-stat/"/>
    <updated>2012-12-11T16:32:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/11/add-51-stat</id>
    <content type="html"><![CDATA[<p>进行网站流量统计的工具有很多，比如Google Analytics。这里，我就使用国产工具<a href="http://www.51.la/">51.la免费统计工具</a>，来对我的博客流量进行统计，具体操作步骤如下：</p>

<!-- more -->


<h4>1. 添加统计ID</h4>

<p>添加你要进行流量监测的网站，填入网站名称和网站地址。</p>

<h4>2. 获取统计代码</h4>

<p>统计代码就是一个js引用或者图片引用，如果网页被访问，这段JS代码就会运行并调用51.la某一台服务器上的一个程序，从而让程序感知到网站被访问了。有的用户使用了不支持javascript的浏览器，那么该浏览器会尝试读取嵌入代码中引用的图片，这个图片也位于51.La的服务器上，51统计服务器也会因为这个图片被引用而感知到您的网站被访问。统计代码是如下的代码，当然，每个用户的每个应用的统计代码是不一样的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script language="javascript" type="text/javascript" src="http://js.users.51.la/id.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;noscript&gt;&lt;a href="http://www.51.la/?id" target="_blank"&gt;&lt;img alt="&#x6211;&#x8981;&#x5566;&#x514D;&#x8D39;&#x7EDF;&#x8BA1;" src="http://img.users.51.la/id.asp" style="border:none" /&gt;&lt;/a&gt;&lt;/noscript&gt;</span></code></pre></td></tr></table></div></figure>


<h4>3. 将统计代码嵌入到网页中</h4>

<p>由于我的博客是用octopress搭建的，那么下面讲一下在octopress中创建51.la流量统计的方法。</p>

<ul>
<li>在source/_includes/custom 中创建文件51_stat.html，在文件中贴入以下代码。代码的意思就是：判断全局变量51_stat是否设置为true，如果是的话，就添加后面的js代码，这里的js代码实际上就是上面获取的统计代码；</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% if site.51_stat %}
</span><span class='line'>  &lt;script language="javascript" type="text/javascript" src="http://js.users.51.la/id.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;noscript&gt;&lt;a href="http://www.51.la/?id" target="_blank"&gt;&lt;img alt="&#x6211;&#x8981;&#x5566;&#x514D;&#x8D39;&#x7EDF;&#x8BA1;" src="http://img.users.51.la/id.asp" style="border:none" /&gt;&lt;/a&gt;&lt;/noscript&gt;
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在source/_includes/after_footer中添加下面的第五行代码，其他都是本来就有的。也可以添加在其他文件，或者改文件的其他行，没什么影响；</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include disqus.html %}
</span><span class='line'>{% include facebook_like.html %}
</span><span class='line'>{% include google_plus_one.html %}
</span><span class='line'>{% include twitter_sharing.html %}
</span><span class='line'>{% include custom/51_stat.html %}
</span><span class='line'>{% include custom/after_footer.html %}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在octopress的根目录中的_config.yml文件最后添加以下几行代码。这里的51_stat实际上就是在51_stat.html文件中用到的变量，如果设置为true，就进行流量统计。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># stat
</span><span class='line'>51_stat: true</span></code></pre></td></tr></table></div></figure>


<h4>4. 提交代码，部署，等待</h4>

<p>下一步就是提交代码，部署blog，然后等待生效。我的博客设置好之后，5分钟就可以看到流量统计了。一个标志就是在博客最下面出现了这个图标：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><img src="http://zhangdian.github.com/images/custom/51_stat_icon.jpg"></span></code></pre></td></tr></table></div></figure>


<p>另外总结在博客中不使用网络图片，而是直接使用博客文件夹中的图片的方法：在source/images文件夹中建立一个文件夹custom，意思是这里面的图片都是我的博客中使用的图片，然后将博客中要使用的图片都放在这个文件夹里面即可，引用的时候使用如下代码即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% img /images/custom/51_stat_icon.jpg %}</span></code></pre></td></tr></table></div></figure>


<h4>5. 相关参考</h4>

<ul>
<li><a href="http://help.51.la/howto/start.asp">51流量统计-新用户快速启程</a></li>
<li><a href="http://www.51.la/">51la官网</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个关于sql语句的问题]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/11/a-sql-question/"/>
    <updated>2012-12-11T15:29:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/11/a-sql-question</id>
    <content type="html"><![CDATA[<p>看到一个问题，据说很多大牛都搞不出来，看了看，问题虽然不是很难，但是一句sql确实包含了很多的sql知识的，mark下来，回忆一下丢失已久的sql知识。</p>

<!-- more -->


<h4>问题</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>数据表结构
</span><span class='line'>user_name product_id
</span><span class='line'>1            A
</span><span class='line'>2            B
</span><span class='line'>1            B
</span><span class='line'>3            C
</span><span class='line'>4            C
</span><span class='line'>1            C
</span><span class='line'>需求：哪些用户同时购买了 A，C，D？（或者说，同时购买A，C，D的用户都是那些？）
</span><span class='line'>A,C,D是用户临时输入的，每次都确定、但不固定。</span></code></pre></td></tr></table></div></figure>


<h4>解答</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT user_name
</span><span class='line'>FROM product_buy
</span><span class='line'>WHERE product_id in( A, C, D )
</span><span class='line'>GROUP BY user_name
</span><span class='line'>HAVING COUNT( DISTINCT product_id ) = 3 ;</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<ul>
<li>问题来源：<a href="http://julying.com/blog/mysql-and-problem-sets/">一个 MYSQL 并集 的问题</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java spring的一些best practice]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/11/java-spring-some-best-practices/"/>
    <updated>2012-12-11T15:06:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/11/java-spring-some-best-practices</id>
    <content type="html"><![CDATA[<p>一些没写过java，现在一直主要写java，刚才向公司的java大牛请教了一些关于java spring的一些观点，现在总结如下，作为自己的一些best practice。</p>

<!-- more -->


<h4>1. 异常处理</h4>

<h5>1.1 什么是异常</h5>

<p>异常分为两种，一种是checked异常，比如IOException、SQLException，一种是unchecked异常。这两种Exception的区别主要是CheckedException需要用try&#8230;catch&#8230;显示的捕获，而UncheckedException不需要捕获。通常UncheckedException又叫做RuntimeException。</p>

<ul>
<li>我们常见的RuntimeExcepiton有IllegalArgumentException、IllegalStateException、NullPointerException、IndexOutOfBoundsException等等。</li>
<li>对于那些CheckedException就不胜枚举了，我们在编写程序过程中try&#8230;catch&#8230;捕捉的异常都是CheckedException。io包中的IOException及其子类，这些都是CheckedException。</li>
</ul>


<h5>1.2 异常best practice</h5>

<ul>
<li>如果逻辑比较核心的话，那么就创建一个专门的异常，继承runtimeexception，在这个异常中需要记录能够标示这个异常的一些必要的信息，比如用户id以及基本信息等，来替代日志；</li>
<li>如果逻辑不是太核心的话，创建通用的异常类，同样继承runtimeexception，在这个异常里记录一些常用的信息；</li>
</ul>


<p>总之，我们自己创建的异常都是继承自runtimeexception的。定义特殊的类是为了记录特殊的信息，而如果没有特殊的信息，那么就使用通用的异常类就行。</p>

<h4>2. spring框架内service和dao调用</h4>

<ul>
<li>service和dao之间，service和service之间的调用其实没有什么限制，都是可以调用的；</li>
<li>一般在一个service函数中，通常是调用dao来完成这个函数的功能；</li>
<li>如果另外一个service中的一个函数，完成了我们现在要完成的一个业务，也可以直接去调用哪个函数即可，而不是去调用dao，然后把那个函数的逻辑重新走一遍，这样做的目的就是省事方便。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[js代码约定]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/11/js-code-conventions/"/>
    <updated>2012-12-11T11:17:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/11/js-code-conventions</id>
    <content type="html"><![CDATA[<p>下面从注释、变量声明等各个方面总结js中的代码约定。</p>

<!-- more -->


<h4>1. 长度</h4>

<p>每行长度不能多于80个字符，如果超过了80个字符的话，就回车换行，新的一行缩进8个字符；</p>

<h4>2. 注释</h4>

<p>注释要有意义，不要写一眼就可以看出来的注释，应该写那种不能马上明白过来的注释；</p>

<h4>3. 变量声明</h4>

<p>所有变量使用之前应该声明，比较好的做法是一个变量一行，后面加上他们的注释，然后以字符顺序排序；</p>

<p>注意：js没有块作用域，只有函数作用域，在函数中任何地方定义的变量，在函数的任何位置都可以使用，所以应该将所有变量定义在函数开头处；</p>

<h4>4. 函数</h4>

<ul>
<li>所有函数使用前都应该声明，内部函数需要用var声明；</li>
<li>在函数名称和‘（’之间不能有空格，在‘）’和‘{’之间要有一个空格；</li>
<li>‘}’单独一行，和函数开头对齐；</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function fun1() { 
</span><span class='line'>    // 函数体
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果函数式匿名的，那么在‘function’和‘（’之间应该有一个空格，如果忽略了这个空格，那么有可能把这个函数的函数名误认为‘function’；</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var fun1 = function () {
</span><span class='line'>    return 1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>尽量不要使用全局函数；</li>
<li>如果函数定义的时候立即被调用，那么整个表达式需要被包裹在‘（）’中间，来表明结果是函数的返回值而不是函数本身；</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var fun1 = (function () {
</span><span class='line'>    return 1;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h4>5. 变量名称</h4>

<ul>
<li>使用A-Z，a-z，是个数字以及下划线做成名字；</li>
<li>不要使用”_“作为名字的第一个字符，因为这一般表示private变量，但是js实际上没有提供private；</li>
<li>使new实例化的对象必须使用一个大写字符作为开头；</li>
<li>全局变量应该全部是大写的；</li>
</ul>


<h4>6. 语句</h4>

<h5>6.1 单行语句</h5>

<ul>
<li>每一行末尾都应该有一个‘；’；</li>
</ul>


<h5>6.2 符合语句</h5>

<p>复合语句是包含在{}之间的语句列表。</p>

<ul>
<li>被包含在内部的语句需要缩进四个空格；</li>
<li>‘{’应该出现在开始这个compound statement的末尾；</li>
<li>‘}’应该单独一行，和这个compound statement开始处对齐；</li>
<li>即使只有一行语句，也应该包含在‘{}’里面；</li>
</ul>


<h4>7. 返回值</h4>

<p>返回值不应该被‘（）’包括起来；</p>

<h4>8. switch</h4>

<ul>
<li>每一个case都应该和switch对齐；</li>
<li>每一个case，都应该以break、return或者throw结束，不能落空；</li>
</ul>


<h4>9. 哪里使用空格</h4>

<ul>
<li>一个关键字后面紧跟一个‘（’；</li>
<li>每一个‘，’后面都应该跟一个空格；</li>
<li>for循环条件语句中的每一个‘；’后面都应该跟一个空格；</li>
<li>对于一元运算符，在运算符和他的操作数之间不应该添加空格，除了typeof；</li>
<li>所有二元运算符，除了&#8217;.&#8217; , &#8216;(&#8217; , &#8216;[&#8217; 应该使用一个空格来和他的操作数隔开；</li>
</ul>


<h4>10. 额外建议</h4>

<ul>
<li>用{}代替new Object();</li>
<li>用[]代替 new Array();</li>
<li>当数组成员序号是连续的时候，使用数组new Array();</li>
<li>当对象名称是任意的时候，使用object；</li>
<li>尽量使用===和!==，==和!=执行类型检查；</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置个性化域名]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/11/setup-custom-domain/"/>
    <updated>2012-12-11T10:05:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/11/setup-custom-domain</id>
    <content type="html"><![CDATA[<p>假设你拥有自己的域名，而且又不想使用github的域名，那么可以使用github的custom domain功能，设置自己的域名。</p>

<h4>1. 在自己的代码库中进行设置</h4>

<p>在source分支中，进入source文件夹，添加一个文件“CNAME”，然后再文件中填入你的域名：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>youdomain.com</span></code></pre></td></tr></table></div></figure>


<p>比如我的是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blog.bd17kaka.net</span></code></pre></td></tr></table></div></figure>


<p>然后commit，push到代码库即可。</p>

<h4>2. 设置DNS</h4>

<p>这里分为两种情况，也就是顶级域名（Top-level domain）和子域名（SubDomain）。</p>

<h5>2.1 顶级域名</h5>

<p>对于一个顶级域名，设置一个A记录到地址204.232.175.78。这里不要使用CNAME记录，因为这样会影响你的顶级域名上的其他服务，比如邮件服务等。</p>

<h5>2.2 子域名</h5>

<p>使用子域名的话，设置一个CNAME记录到，比如我的记录是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blog.bd17kaka.net   zhangdian.bd17kaka.net</span></code></pre></td></tr></table></div></figure>


<h4>3. 等待</h4>

<p>dns设置和github的设置需要一段时间的等待。</p>

<h4>4. 参考</h4>

<ul>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">官网资料：Setting up a custom domain with Pages</a></li>
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/">Custom Domain With Octopress and Github Pages</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[借助几个例子加深对js的理解]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/07/js-basic-concept-with-example/"/>
    <updated>2012-12-07T11:13:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/07/js-basic-concept-with-example</id>
    <content type="html"><![CDATA[<p>最近在weibo上看到一个关于js的帖子<a href="http://dmitry.baranovskiy.com/post/91403200">So, you think you know JavaScript?</a>，正好在<a href="http://julying.com/blog/so-you-think-you-know-javascript/">这里</a>看到了关于这几个题目的参考，看完之后总结如下。</p>

<!-- more -->


<h4>题目1</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (!("a" in window)) {
</span><span class='line'>    var a = 1;
</span><span class='line'>}
</span><span class='line'>alert(a);</span></code></pre></td></tr></table></div></figure>


<p>题目的意思是：如果a在window里面的话，将a赋值为1，然后输出a。首先需要明确几个概念：</p>

<ul>
<li>所有的全局变量都属于window，那么语句var a=1；等价于window.a=1；</li>
<li>所有变量声明都在范围作用域的顶部；</li>
</ul>


<p>对于如下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alert("a" in window);
</span><span class='line'>var a;</span></code></pre></td></tr></table></div></figure>


<p>虽然a的声明在后面，但是js引擎会扫描所有变量，然后将这些变量的声明移动到顶部，那么最终的代码会变成下面这个样子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var a;
</span><span class='line'>alert("a" in window);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>js引擎只会将变量声明提前，而不会将变量赋值提前。因为将变量赋值提前可能会使代码的执行出现意想不到的结果；</li>
</ul>


<p>所以题目中的代码最终演化为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var a;
</span><span class='line'>if (!("a" in window)) {
</span><span class='line'>  a = 1;
</span><span class='line'>}
</span><span class='line'>alert(a);</span></code></pre></td></tr></table></div></figure>


<p>所以最终的输出结果会是undefined。这里的“提前”可以理解为“预编译”。</p>

<h4>题目2</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var a = 1,
</span><span class='line'>    b = function a(x) {
</span><span class='line'>        x && a(--x);
</span><span class='line'>    };
</span><span class='line'>alert(a);</span></code></pre></td></tr></table></div></figure>


<p>对于这个题目，首先要知道下面几个概念：</p>

<ul>
<li>函数声明和函数表达式（相当于变量赋值）的区别；</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 函数声明
</span><span class='line'>function functionName(arg1, arg2){
</span><span class='line'>    //函数体
</span><span class='line'>}
</span><span class='line'>// 函数表达式，赋值
</span><span class='line'>var functionName = function(arg1, arg2){
</span><span class='line'>    //函数体
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<ul>
<li>函数声明也是会提前的，和变量声明一样。而函数表达式是不会提前的，和变量赋值一样；</li>
<li>函数声明会覆盖变量声明，但是不会覆盖变量赋值；为了解释这个，下面列举了两个简单例子：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 函数声明和变量声明，名字相同
</span><span class='line'>// 尽管变量声明在函数声明后面，但是变量声明还是被函数声明覆盖了
</span><span class='line'>// 输出为function
</span><span class='line'>function value(){
</span><span class='line'>    return 1;
</span><span class='line'>}
</span><span class='line'>var value;
</span><span class='line'>alert(typeof value);    //"function"
</span><span class='line'>
</span><span class='line'>// 函数声明和变量赋值，名字相同
</span><span class='line'>// 由于变量声明时进行了赋值，所有函数的声明不能覆盖变量的声明
</span><span class='line'>// 所以最终输出为number
</span><span class='line'>function value(){
</span><span class='line'>    return 1;
</span><span class='line'>}
</span><span class='line'>var value = 1;
</span><span class='line'>alert(typeof value);    //"number"    </span></code></pre></td></tr></table></div></figure>


<p>在我们上面的题目中，首先是变量声明加赋值，然后是一个函数表达式，变量赋值覆盖了函数声明，故而最终的输出为1。此外，如果调用b(2)，在IE下会报错，但是在其他浏览器会返回undefined。</p>

<h4>题目3</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function a() {
</span><span class='line'>    return 1；
</span><span class='line'>}
</span><span class='line'>var a;
</span><span class='line'>alert(a);</span></code></pre></td></tr></table></div></figure>


<p>有了前面的知识之后，这题很简单了，函数声明会覆盖变量声明，故而输出是函数a()的定义，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function a() {
</span><span class='line'>    return 1；
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>题目4</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function b(x, y, a) {
</span><span class='line'>    arguments[2] = 10;
</span><span class='line'>    alert(a);
</span><span class='line'>}
</span><span class='line'>b(1, 2, 3);</span></code></pre></td></tr></table></div></figure>


<p>对于arguments，可以参见<a href="http://www.w3school.com.cn/js/pro_js_functions_arguments_object.asp">ECMAScript arguments 对象</a>。活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性的值是Arguments对象。在函数代码中，使用特殊对象arguments，开发者无需明确指出参数名，就能访问它们。故而输出是10。</p>

<h4>题目5</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function a() {
</span><span class='line'>    alert(this);
</span><span class='line'>}
</span><span class='line'>a.call(null);</span></code></pre></td></tr></table></div></figure>


<p>理解这个题目，必须要理解this的用法，可以参见<a href="http://julying.com/blog/javascript-this/">this</a>。关于 a.call(null)；根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者undefined的话，call方法将把全局对象（也就是window）作为this的值。所以，不管你什么时候传入null，其this都是全局对象window，所以题目的输出就是：“[object Window]”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freemind 思维导图制作工具]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/06/freemind-docs/"/>
    <updated>2012-12-06T14:14:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/06/freemind-docs</id>
    <content type="html"><![CDATA[<h3>1. 介绍</h3>

<p>FreeMind是由Java撰写而成的实用的开源思维导图/心智软件，可以用来整理思维，结构化，帮助对整个作业流程的了解。</p>

<h3>2. 工程界面</h3>

<p><img src="https://photos-2.dropbox.com/t/0/AAAT9RYz0wKjZM8omZiI1ufbQN0OoTR44LRDKWcUtAdcxQ/10/99113526/png/1024x768/2/1354780800/0/2/800px-FreeMind-computer-knowledge-080.png/cpY386WI1Qo5Zi_0hjbWVSWEIwP3OnZPvpTKxRPG-6c"></p>

<h3>3. 生成的图片</h3>

<p><img src="https://photos-5.dropbox.com/t/0/AAA8EfktxAUuBZpgx_4JV7I1CqeraFSNh4VJYcDx7c9AFw/10/99113526/jpeg/1024x768/2/1354784400/0/2/The-JavaScript-variable.gif/16UNrKS_XDauSXxkYz7NW8wkKDfVVKnMNWrYfKK7RpE"></p>

<h3>4. 相关链接</h3>

<ul>
<li><a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page">freemind wiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CTeX]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/04/ctex/"/>
    <updated>2012-12-04T18:08:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/04/ctex</id>
    <content type="html"><![CDATA[<h3>1. tex相关概念</h3>

<h4>1.1 tex</h4>

<p>TEX就是一种优秀的电子排版系统。TEX提供了一套功能强大并且十分灵活的排版语言，它多达900 多条指令，并且TEX 有宏功能，用户可以不断地定义自己适用的新命令来扩展TEX 系统的功能。许多人利用TEX 提供的宏定义功能对TEX 进行了二次开发。</p>

<h4>1.2 什么是latex</h4>

<p>LATEX是当今世界上最流行和使用最为广泛的TEX宏集。它构筑在Plain TEX 的基础之上，并加进了很多的功能以使得使用者可以更为方便的利用TEX 的强大功能。使用LATEX基本上不需要使用者自己设计命令和宏等，因为LATEX已经替你做好了。因此，即使使用者并不是很了解TEX，也可以在短短的时间内生成高质量的文档。对于生成复杂的数学公式，LATEX表现的更为出色。</p>

<h4>1.3 tex和latex的关系</h4>

<p>LATEX是TEX中的一种格式(format)，是建立在TEX基础上的宏语言，也就是说，每一个LATEX命令实际上最后都会被转换解释成几个甚至上百个TEX命令。</p>

<h4>1.4 MiKTEX、fpTEX、teTEX、CTEX的关系</h4>

<p>TEX在不同的硬件和操作系统上有不同的实现版本。这就像C语言，在不同的操作系统中有不同的编译系统，例如Linux下的gcc，Windows下的Visual C++等。有时，一种操作系统里也会有好几种的TEX系统。目前常见的Unix/Linux下的TEX系统是teTEX，Windows下则有MiKTEX和fpTEX。CTEX 指的是CTEX中文套装的简称，是把MiKTEX和一些常用的相关工具，如GSview，WinEdt等包装在一起制作的一个简易安装程序，并对其中的中文支持部分进行了配置，使得安装后马上就可以使用中文。</p>

<h3>2. ctex实践</h3>

<h4>2.1 头部</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\documentclass[16pt,oneside,a4paper,UTF8]{ctexart}
</span><span class='line'>\usepackage{CJKutf8}
</span><span class='line'>\usepackage[unicode=true]{hyperref}
</span><span class='line'>\usepackage{graphicx}
</span><span class='line'>%\usepackage{makeidx}
</span><span class='line'>\begin{document}
</span><span class='line'>\title{title}
</span><span class='line'>\author{author}
</span><span class='line'>\date{\today}
</span><span class='line'>\maketitle</span></code></pre></td></tr></table></div></figure>


<h4>continue&#8230;</h4>

<h3>3. 参考资料</h3>

<ul>
<li><a href="http://www.ctex.org/TeX">ctex介绍</a></li>
<li><a href="http://www.ctex.org/CTeXFAQ">ctex FAQ PDF文档下载</a></li>
<li><a href="http://bbs.ctex.org/forum.php">ctex论坛</a></li>
<li><a href="http://www.ctex.org/CTeXDownload">ctex下载</a></li>
<li><a href="https://www.dropbox.com/s/xtiqy6g15ixnruk/LaTeX.pdf?m">latex英文文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress代码片段分享]]></title>
    <link href="http://zhangdian.github.com/blog/2012/11/29/octopress-sharing-code-snippets/"/>
    <updated>2012-11-29T10:44:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/11/29/octopress-sharing-code-snippets</id>
    <content type="html"><![CDATA[<h3>1.介绍</h3>

<p>octopress文档中提供了很多种的代码分享高亮方法，其中我用的最多的就是两种：</p>

<ul>
<li>Backtick Code Blocks</li>
<li>Include Code Snippets</li>
</ul>


<h3>2. Backtick Code Blocks</h3>

<p>这种方式可以用于代码片段的分享，其格式如下</p>

<pre><code>``` [language] [title] [url] [link text]
code snippet
```
</code></pre>

<p>其中带‘[]’的都是可选项。</p>

<h4>问题:</h4>

<ul>
<li>我把可选项都带上，但是不能正确显示，在后台一直提示“favicon.ico无法找到”。</li>
</ul>


<h3>3. Include Code Snippets</h3>

<p>这种方式可以将文件系统中的任何文件导入到博客的任何位置，并且还提供高亮和代码下载。</p>

<h4>3.1 语法</h4>

<pre><code>{{ "{% include_code [title] [lang:language] path/to/file" }} %}
</code></pre>

<p>其中title是标题；lang是你的代码的语言，可以提供高亮的功能；</p>

<p>文件路径的默认根目录在_config.yml中的变量code_dir中，而其默认值是source/downloads/code，只需要把要include的代码放到这个文件夹里就行了。</p>

<h4>问题：</h4>

<ul>
<li>要想以文本形式显示上述语法文本，需要转义一下，如果直接使用“{% include_code &#8230;&#8230;”这样来显示文本的话，默认会被解析为“Backtick Code Blocks”形式的代码引入，所以需要使用链接1的方式进行转义一下。</li>
</ul>


<h3>参考链接</h3>

<ol>
<li><a href="https://github.com/imathis/octopress/blob/site/source/docs/plugins/include-code/index.markdown">文本形式显示include_code语法</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[个性化octopress设置]]></title>
    <link href="http://zhangdian.github.com/blog/2012/11/29/setup-custom-octopress/"/>
    <updated>2012-11-29T00:08:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/11/29/setup-custom-octopress</id>
    <content type="html"><![CDATA[<h3>1. Octopress个性化设置文件</h3>

<p>主要文件都在source/_includes/文件夹中，其中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/asides/ #包含侧边栏的项目
</span><span class='line'>/custom/ #包含个性化头部、导航栏，footer以及侧边栏等</span></code></pre></td></tr></table></div></figure>


<p>/custom中包含的都是个性化的页面，其中也包含</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/asides/ #包含个性化的侧边栏项目
</span><span class='line'>/*.html  #个性化的页面，可以在这里设置自己个性化的页面</span></code></pre></td></tr></table></div></figure>


<p>那么，设置自己个性化的页面，主要修改的是source/<em>incledes/中的内容。
此外，修改了文件内容之后，还需要修改</em>config.yml中的部分内容才能生效，具体见后面的设置。</p>

<!-- more -->


<h3>2. sina相关</h3>

<p>sina的开放平台上提供了很多可以作为插件到octopress中的元素，包括分享按钮、关注按钮等等，见链接：</p>

<ol>
<li><a href="http://open.weibo.com/">sina开放平台</a></li>
<li><a href="http://open.weibo.com/sharebutton">sina分享按钮界面</a></li>
</ol>


<h4>2.1 sina分享</h4>

<p>要想在边框栏设置sina分享，要修改三个地方的内容：</p>

<ul>
<li>添加文件/source/_includes/custom/asides/sina_weibo_sharing.html文件，其中内容如下：
{% include_code ruby sina_weibo_sharing.html %}</li>
<li>修改_config.yml，在最后添加下面的代码：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Weibo 
</span><span class='line'>weibo_uid: 1930318973
</span><span class='line'>weibo_fansline: 0   # How many lines for the fan list
</span><span class='line'>weibo_show: true    # Whether you want your weibo content to be shown
</span><span class='line'>weibo_pic: true     # Whether you want the pictures in weibo to be shown
</span><span class='line'>weibo_skin: 10      # Please refer to http://weibo.com/tool/weiboshow
</span><span class='line'>weibo_share: true   # Whether show the sharing button</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改_config.yml，在defaule_asides数组中添加一项：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>custom/asides/sina_weibo_sharing.html</span></code></pre></td></tr></table></div></figure>


<h4>2.2 sina关注</h4>

<p>要想在边框栏设置sina关注，要修改两个地方的内容：</p>

<ul>
<li>添加文件/source/_includes/custom/asides/sina_weibo_follow.html文件，其中内容如下：
{% include_code sina_weibo_follow.html %}</li>
<li>修改_config.yml，在defaule_asides数组中添加一项：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>custom/asides/sina_weibo_follow.html</span></code></pre></td></tr></table></div></figure>


<h4>2.3 将新浪分享添加到每个博客页面下方</h4>

<p>在_include/post/sharing.html添加如下代码即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% if site.weibo_share %}
</span><span class='line'>&lt;script type="text/javascript" charset="utf-8"&gt;
</span><span class='line'>(function(){
</span><span class='line'>  var _w = 72 , _h = 16;
</span><span class='line'>  var param = {
</span><span class='line'>    url:'{{ site.url }}{{ page.url }}',
</span><span class='line'>    type:'3',
</span><span class='line'>    count:'1', /**是否显示分享数，1显示(可选)*/
</span><span class='line'>    appkey:'', /**您申请的应用appkey,显示分享来源(可选)*/
</span><span class='line'>    title:'', /**分享的文字内容(可选，默认为所在页面的title)*/
</span><span class='line'>    pic:'', /**分享图片的路径(可选)*/
</span><span class='line'>    ralateUid:'', /**关联用户的UID，分享微博会@该用户(可选)*/
</span><span class='line'>  language:'zh_cn', /**设置语言，zh_cn|zh_tw(可选)*/
</span><span class='line'>    rnd:new Date().valueOf()
</span><span class='line'>  }
</span><span class='line'>  var temp = [];
</span><span class='line'>  for( var p in param ){
</span><span class='line'>    temp.push(p + '=' + encodeURIComponent( param[p] || '' ) )
</span><span class='line'>  }
</span><span class='line'>  document.write('&lt;iframe allowTransparency="true" frameborder="0" scrolling="no" src="http://hits.sinajs.cn/A1/weiboshare.html?' + temp.join('&') + '" width="'+ _w+'" height="'+_h+'"&gt;&lt;/iframe&gt;')
</span><span class='line'>})()
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>  {% endif %}</span></code></pre></td></tr></table></div></figure>


<h3>3. About.html</h3>

<p>可以添加关于自己的介绍页面，同样，需要修改两个地方的数据：</p>

<ul>
<li>添加文件/source/_includes/custom/asides/about.html的内容</li>
<li>修改_config.yml，在defaule_asides数组中添加一项：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>custom/asides/about.html</span></code></pre></td></tr></table></div></figure>


<h3>4. 添加评论</h3>

<p>Octopress使用的是<a href="http://www.disqus.com/">disqus</a>插件来展示文章的评论。</p>

<h4>4.1 disqus</h4>

<p>在<a href="http://www.disqus.com/">disqus官网</a>注册一个账号，然后按提示设置shortname，Website name以及Website URL即可。这里的Website必须填写你要使用该插件的网址，也就是你的blog地址，对于我则是http://zhangdian.github.com。这里的shortname是要在octopress设置中填写的值。</p>

<h4>4.2 octopress配置</h4>

<p>需要再_config.yml中填写disqus_short_name的值，也就是在注册disqus时的shortname的值，那么这行设置最后的形式就是“disqus_short_name: value”。注意，冒号后面一定要有一个空格，不然会报错。</p>

<h4>4.3 文章设置</h4>

<p>在文章头部，有一个选项是“comments”，把他设置成true。</p>

<h4>4.4 使用到的文件</h4>

<p>在octopress结构中，实际上是在source/_includes/after_footer.html中引入了评论页面：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ "{% include disqus.html" }} %}
</span><span class='line'>{{ "{% include facebook_like.html" }} %}
</span><span class='line'>{{ "{% include google_plus_one.html" }} %}
</span><span class='line'>{{ "{% include twitter_sharing.html" }} %}
</span><span class='line'>{{ "{% include custom/after_footer.html" }} %}
</span></code></pre></td></tr></table></div></figure>


<p>其中第一个就是。后面三个分别是facebook、google+、twitter的一些东西，最后一项是引入个性化的设置。在disqus.html中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ "{% if site.disqus_short_name and page.comments != false" }} %}
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>      var disqus_shortname = '{{ site.disqus_short_name }}';
</span><span class='line'>      {% if page.comments == true %}
</span><span class='line'>        {% comment %} `page.comments` can be only be set to true on pages/posts, so we embed the comments here. {% endcomment %}
</span><span class='line'>        // var disqus_developer = 1;
</span><span class='line'>        var disqus_identifier = '{{ site.url }}{{ page.url }}';
</span><span class='line'>        var disqus_url = '{{ site.url }}{{ page.url }}';
</span><span class='line'>        var disqus_script = 'embed.js';
</span><span class='line'>      {% else %}
</span><span class='line'>        {% comment %} As `page.comments` is empty, we must be on the index page. {% endcomment %}
</span><span class='line'>        var disqus_script = 'count.js';
</span><span class='line'>      {% endif %}
</span><span class='line'>    (function () {
</span><span class='line'>      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
</span><span class='line'>      dsq.src = 'http://' + disqus_shortname + '.disqus.com/' + disqus_script;
</span><span class='line'>      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
</span><span class='line'>    }());
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>{% endif %}</span></code></pre></td></tr></table></div></figure>


<p>只有在全局变量disqus_short_name和页面变量comments同时为true的时候，才会加载评论页面。</p>

<h4>4.5 关于source/_includes/post/sharing.html页面</h4>

<p>这个页面里面包含的内容紧跟着文章内容下面显示，而我们上述讨论的评论页面是在这下面显示的。</p>

<h3>5. 遇到的问题</h3>

<h4>5.1 undefined method `Py_IsInitialized&#8217; for RubyPython::Python:Module</h4>

<p>在使用插件功能给博客添加边框栏项目的时候，提示上述错误，原因是没有安装python，解决办法是首先安装python，然后bundle update更新一下，就ok了。参考网站：</p>

<ol>
<li><a href="https://github.com/github/gollum/issues/225">Py_IsInitialized error</a></li>
<li><a href="https://github.com/imathis/octopress/issues/262">Exception on generate codeblock with &#8220;lang:&#8221; on Windows</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git配置]]></title>
    <link href="http://zhangdian.github.com/blog/2012/11/27/git-config/"/>
    <updated>2012-11-27T19:08:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/11/27/git-config</id>
    <content type="html"><![CDATA[<p>使用git进行版本管理，经常需要敲各种命令，比如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout
</span><span class='line'>git status
</span><span class='line'>git commit
</span><span class='line'>git branch</span></code></pre></td></tr></table></div></figure>


<p>等等，可以在git中进行全局配置，让这些命令更加短一些：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global alias.co chekcout
</span><span class='line'>git config --global alias.st status
</span><span class='line'>git config --global alias.ci commit
</span><span class='line'>git config --global alias.br branch</span></code></pre></td></tr></table></div></figure>


<p>这样，以后就可以敲比较短的命令了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox的安装(Ubuntu12.04)]]></title>
    <link href="http://zhangdian.github.com/blog/2012/11/23/setup-dropbox-on-ubuntu/"/>
    <updated>2012-11-23T16:19:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/11/23/setup-dropbox-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Dropbox是一款资料同步软件，只要把资料存在云端，就可以无处不在的访问到这些资料。今天在Ubuntu12.04下安装了Dropbox，把安装过程和遇到的问题写下来。</p>

<!--more-->


<h3>1. 安装过程</h3>

<p>访问<a href="https://www.dropbox.com/install?os=linux">Dropbox for Linux</a>，可以下载deb文件，也可以下载源码编译安装，也可以从命令行安装。我选择从命令行安装。</p>

<p>根据系统版本的不同，输入不同的命令进行安装就行：</p>

<pre><code># 32位
cd ~ &amp;&amp; wget -O - "https://www.dropbox.com/download?plat=lnx.x86" | tar xzf - 
# 64位
cd ~ &amp;&amp; wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
</code></pre>

<p>安装完之后，运行</p>

<pre><code>~/.dropbox-dist/dropboxd
</code></pre>

<p>就可以运行dropbox了。</p>

<h3>2. 自动启动Dropbox</h3>

<p>在/etc/init.d/文件夹中添加一个文件auto_dropbox.sh，添加以下代码：</p>

<pre><code>~/.dropbox-dist/dropboxd &amp;
</code></pre>

<p>保存退出到shell，输入以下命令：</p>

<pre><code>sudo chmod +x /etc/init.d/auto_dropbox.sh # 设置script的执行权限
sudo update-rc.d auto_dropbox.sh defaults # 设置script在系统启动时执行
</code></pre>

<p>这样，就可以在系统启动的时候自动启动dropbox，可以使用命令：</p>

<pre><code>dropbox status
</code></pre>

<p>来查询dropbox的状态。但是，每次启动都不能自动运行，不知道为什么。还是在启动之后，运行命令在后台运行吧。</p>

<h3>3. 相关链接</h3>

<ul>
<li><a href="https://www.dropbox.com/install?os=linux">dropbox for linux download</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用git操作Octopress]]></title>
    <link href="http://zhangdian.github.com/blog/2012/11/21/git-operation-with-octopress/"/>
    <updated>2012-11-21T15:34:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/11/21/git-operation-with-octopress</id>
    <content type="html"><![CDATA[<h2>1. 建立dev分支</h2>

<p>默认情况下，octopress在本地只有一个source分支。我另外建立一个dev分支，开始的时候，设置dev分支和source分支一致，在source分支，执行命令(1)就可以新建一个和source内容一样的分支，并且自动checkout到dev分支；</p>

<pre><code>git checkout source -b dev (1)
</code></pre>

<!--more-->


<h2>2. 编辑文件，commit</h2>

<p>以后在编辑博客的时候，在dev分支编辑，编辑完之后在source文件夹中，执行命令(2)就可以将该表提交；</p>

<pre><code>git add *
git commit -m'msg' (2)
</code></pre>

<h2>3. 合并代码，push</h2>

<p>然后切换到source分支，pull远程的代码下来，然后merge dev分支的代码，然后将source的代码push上去就完成代码的更新了；</p>

<pre><code>git checkout source
git pull origin source
git merge dev
git push origin source
</code></pre>

<h2>4. 生成、部署</h2>

<p>最后生成，部署新的博客内容就ok了；</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>此外，以后每次编辑博客之前，最好首先将远程的代码pull下来，然后编辑，编辑完之后最后马上push，这样可以防止冲突的产生。</p>

<h2>5. 参考</h2>

<ul>
<li><a href="http://note.softrayn.com/blog/2012/07/two-pc-sync-octopress/">两台计算机同步octopress</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress安装与配置（Ubuntu12.04）]]></title>
    <link href="http://zhangdian.github.com/blog/2012/11/21/setup-octopress-on-ubuntu/"/>
    <updated>2012-11-21T14:06:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/11/21/setup-octopress-on-ubuntu</id>
    <content type="html"><![CDATA[<p>之前安装了在Windows7下面安装了Octopress，现在也把在Ubuntu12.04下安装过程中遇到的问题记录一下。</p>

<!--more-->


<h1>1. 环境搭建</h1>

<h2>1.1 安装git</h2>

<pre><code>apt-get install git
</code></pre>

<h2>1.2安装ruby</h2>

<h3>1.2.2 安装RVM</h3>

<p>RVM(Ruby Version Manager)管理ruby环境的安装，而octopress需要ruby1.9.3。使用如下命令就能安装rvm：</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<h3>1.2.1 安装ruby依赖</h3>

<p>直接安装RVM会失败，在此之前要安装ruby的依赖包，使用如下命令安装ruby依赖：</p>

<pre><code>apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake
</code></pre>

<p>如果rvm安装失败的情况下，最后彻底清除rvm环境，然后安装依赖，然后安装rvm，使用如下的代码应该可以彻底清除rvm环境：</p>

<pre><code>sudo apt-get --purge remove ruby-rvm
sudo rm -rf /usr/share/ruby-rvm /etc/rvmrc /etc/profile.d/rvm.sh
</code></pre>

<p>然后使用如下命令查询rvm，确认没有输出，可以尝试打开新的窗户来查询。</p>

<pre><code>env | grep rvm
</code></pre>

<p><em>注：每次使用rvm之前好像要source一下~/.rvm中的一个script才能正常工作。</em></p>

<h3>1.2.3 安装ruby</h3>

<p>使用如下命令安装ruby就行：</p>

<pre><code>rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest
</code></pre>

<h1>2. 安装Octopress</h1>

<p>使用如下命令就可以把octopress clone下来了：</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<p>然后安装依赖：</p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p>最后执行命令安装默认主题：</p>

<pre><code>rake install
</code></pre>

<h1>3. 其他</h1>

<ul>
<li>其他项目比如博客设置，编写博客和在windows下面是一样的了；</li>
<li>在windows下面是使用MarkdownPad来编辑的，在Ubuntu下可以使用retext来编辑；</li>
</ul>


<h1>4. 参考链接</h1>

<ul>
<li><a href="http://stackoverflow.com/questions/9056008/installed-ruby-1-9-3-with-rvm-but-command-line-doesnt-show-ruby-v/9056395#9056395">Installed Ruby 1.9.3 with RVM but command line doesn&#8217;t show ruby -v</a></li>
<li><a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a></li>
<li><a href="http://413486774.iteye.com/blog/1166431">RVM “ERROR: Loading command: install (LoadError) > no such file to load — zlib”</a></li>
<li><a href="http://octopress.org/docs/setup/">Octopress Setup</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress的安装与配置(Windows 7)]]></title>
    <link href="http://zhangdian.github.com/blog/2012/11/20/setup-octopress/"/>
    <updated>2012-11-20T16:15:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/11/20/setup-octopress</id>
    <content type="html"><![CDATA[<h1>1.Octopress安装</h1>

<h2>1.1 环境配置</h2>

<p>我是在windows 7上安装的Octopress，Octopress的安装基本上按照<a href="http://octopress.org/docs/setup/">Octopress安装文档</a>安装就行。我遇到的问题主要有以下几点：</p>

<ul>
<li>ruby的版本问题，Octopress必须要ruby1.9.3，如果版本不对的话，文档中提供了rbenv和rvm两种方法来安装合适的版本。我直接使用<a href="http://www.douban.com/group/topic/29077892/">http://www.douban.com/group/topic/29077892/</a>中讲到的办法，也就是直接安装Ruby Installer和development kit就行了，在ruby的官网上下载就行</li>
<li>另外在执行rake的命令的时候，提示Octopress需要0.9.2.2版本，但是我的版本是10.0.1，最后查到可以在前面加上“bundle exec”，就可以通过执行</li>
</ul>


<!--more-->


<h2>1.2 博客部署</h2>

<pre><code>rake setup_github_pages
rake generate
rake deploy
</code></pre>

<p>当然，这里需要再每个rake签名加上bundle exec。</p>

<h2>1.3 编写博客</h2>

<pre><code>rake new_post["title"]
</code></pre>

<p>使用上述命令添加一个博客页面，具体的信息见<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a>。生成的博客文件都在“/source/_post/”中。
由于编码的原因，我直接在MINGW32里面编写博客文件后，在部署的时候会出问题，所以我使用了<a href="http://markdownpad.com/">MarkDownPad</a>来编写生成的博客文件，然后再进行部署就不会出编码问题。</p>

<h2>1.4 其他</h2>

<p>这里只是Octopress最基本的功能，还有很多功能有待研究。。。</p>

<h2>1.5 参考资料</h2>

<ul>
<li><a href="http://sinosmond.github.com/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/">在 Windows7 下从头开始安装部署 Octopress</a></li>
</ul>


<h1>2.github博客配置</h1>

<h2>2.1 博客名称</h2>

<p>如果是想使用个人博客的话，可以将reposotory的名称设置为yourname.github.com，这里的yourname必须是你登陆github的用户名，那么最后的博客地址就是yourname.github.com；</p>
]]></content>
  </entry>
  
</feed>
