<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: email | bd17kaka's blog]]></title>
  <link href="http://zhangdian.github.com/blog/categories/email/atom.xml" rel="self"/>
  <link href="http://zhangdian.github.com/"/>
  <updated>2013-07-10T22:38:09+08:00</updated>
  <id>http://zhangdian.github.com/</id>
  <author>
    <name><![CDATA[bd17kaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARF介绍]]></title>
    <link href="http://zhangdian.github.com/blog/2013/07/10/arf/"/>
    <updated>2013-07-10T22:16:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/07/10/arf</id>
    <content type="html"><![CDATA[<h2>ARF文件格式</h2>

<p>ARF全称是Abuse Reporting Format。</p>

<p>在feedback loop协议中，当用户点击了“report spam”之后，邮件服务器会给邮件发送方发送一封邮件，该邮件就是ARF格式的。</p>

<!-- more -->


<h3>格式要求</h3>

<ul>
<li>1.multipart/report的参数report-type必须是feedback-report（MUST）</li>
<li>2.第一部分必须包含人类可读的部分（MUST）</li>
<li>3.第二部分必须包含message/feedback-report。（MUST）</li>
<li>4.第三部分的类型是message/rfc822或者text/rfc822-headers。（MUST）</li>
<li>5.每一个feedback-report只能关联到单个邮件。（MUST）</li>
<li>6.Subject字段必须和原始邮件的一样（SHOULD），如果不同，不同之处应该仅仅是一个典型的“转发前缀”，比如“FW：”。（MUST）</li>
<li>7.应该首先使用第三部分，其次是第二部分，第一部分只是解释说明性的东西，它本身不能算是报告的一部分；如果他和其他部分有冲突的话，SHOULD NOT被使用。</li>
</ul>


<h3>message/feedback-report部分的作用</h3>

<p>提供那些从原始邮件中不能轻易得到的信息，但是接受者不能假设这里的信息都是正确的。</p>

<h3>字段</h3>

<p>协议中定义了很多字段，有的字段必须出现，有的字段可选但只能出现一次，有的字段可选且可以出现多次。</p>

<h4>Required Fields</h4>

<ul>
<li>Feedback-Type</li>
<li>User-Agent</li>
<li>Version</li>
</ul>


<h4>Optional Fields Appering Once</h4>

<ul>
<li>Original-Envelope-Id</li>
<li>Original-Mail-From</li>
<li>Arrival-Date</li>
<li>Reporting-MTA</li>
<li>Source-IP</li>
<li>Incidents</li>
</ul>


<h4>Optional Fields Appering Multiple Times</h4>

<ul>
<li>Authentication-Results</li>
<li>Original-Rcpt-To</li>
<li>Reported-Domain</li>
<li>Reported-URI</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://tools.ietf.org/html/rfc5965#section-3.1">RFC5965</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smtp协议中的各种‘Froms’]]></title>
    <link href="http://zhangdian.github.com/blog/2013/07/10/some-froms-in-smtp-protocol/"/>
    <updated>2013-07-10T22:13:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/07/10/some-froms-in-smtp-protocol</id>
    <content type="html"><![CDATA[<h2>Smtp协议中的各种‘Froms’</h2>

<p>这里主要对Return-Path、From以及Reply-To进行一下区分。</p>

<!-- more -->


<h3>Return-Path</h3>

<p>Return-Path通常也被称作Reverse-Path或Envelope-FROM。</p>

<p>Return-Path是在Smtp session期间使用的。只有接受者的邮件服务器会在邮件的头部添加一个Return-Path头部。</p>

<p>Return-Path是Smtp session期间的真实sender，实际上也就是mailfrom命令对应的地址。</p>

<p>如果在邮件头部以及存在了Return-Path头部，那么旧的Return-Path会被删掉，邮件接收服务器会新添加一个Return-Path头部。</p>

<p>session期间产生的任何bounce，都会发送到Return-Path对应的地址。</p>

<p><strong>有的邮件服务器会接收所有的邮件，然后缓存在本地，直到有一个空闲的进程发送这些邮件到接收者的收件箱。如果某个收件人不存在，那么就会发送一个bounce消息到Return-Path对应的地址。</strong></p>

<p>注意，并不是所有的邮件服务器都遵循这样的规则，有些邮件服务器发送bounce消息到From地址。</p>

<h3>From</h3>

<p>From地址也就是在邮件客户端中，进行邮件展示时可以看到发信人地址。如果邮件中没有Reply-To地址，那么所有的人为的邮件回复都会发往From地址。</p>

<h3>Reply-To</h3>

<p>Reply-To由发送者添加，或者是发送者的软件。</p>

<p>所有人为的回复都会回复到这个地址。当邮件客户端用户点击“回复”按钮时，Reply-To地址用于接收人的地址。</p>

<p>任何的服务器都不应该使用Reply-To地址，它是供客户端使用的。</p>

<h3>总结</h3>

<p>当邮件接收服务器要退信的时候，如果设置了Return-Path，那么就会退到这个地址；没有设置的话，退到From地址；</p>

<p>回复的信件会发送到Reply-To，没有设置的话，会回复到From地址。</p>

<h3>参考</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/1235534/what-is-the-behavior-difference-between-return-path-reply-to-and-from">difference between return-path, reply-to and from? - Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spf介绍]]></title>
    <link href="http://zhangdian.github.com/blog/2013/07/10/spf/"/>
    <updated>2013-07-10T21:53:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/07/10/spf</id>
    <content type="html"><![CDATA[<h2>SPF</h2>

<h3>RFC</h3>

<p>SPF在RFC4408中定义。</p>

<h3>概述</h3>

<p>SPF是一个邮件验证系统，通过检测邮件欺诈，通过验证发送者的ip地址，来防止垃圾邮件。</p>

<p>SPF允许管理员通过在DNS上指定一个SPF record（or TXT record）来指定允许哪些机器可以通过一个指定的域名发送邮件。</p>

<p>邮件服务器使用这个DNS来检测来自一个domain(smtp会话的mailfrom的domain)的邮件是否通过一个由domain的管理员认可的host发出。</p>

<p>也就是在DNS上，为一个域名指定几个ip，凡是发送到该域名上的，必须是这几个ip发来的，才被认为是合法的，其他的都是违法的。</p>

<!-- more -->


<h3>工作原理</h3>

<p>SMTP协议允许任何计算机发送被声明为任意mailfrom的邮件。这被那些经常使用伪造邮件地址的spammers充分利用，导致很难跟踪到邮件发送者，并且很容易使spammers隐藏自己的身份，从而达到避开责任的目的。很多人相信，在现代的SMTP中，任何人都可以随意伪造发送地址是一个安全漏洞。</p>

<p>SPF允许一个domain的拥有者通过使用指定的DNS记录（SPF, type99），来授权哪些机器（ip）使用带有那个domain的发送地址来发送邮件。</p>

<p>接受者在接收消息体的时候，首先验证SPF记录，从而阻止来自未被认证的发送地址的消息。</p>

<p>在新的record类型普遍使用到DNS软件中之前，早期的实现都使用TXT records实现。为SPF使用TXT records是一个过渡措施。当然，如果在DNS上同时指定两种记录的话，两者的记录值必须是一样的。</p>

<p>发送者的ip地址在SMTP对象开始的时候传输，如果服务者器拒绝发送，那么这个未被验证的客户端会接收到一个拒绝消息，如果这个客户端是一个MTA，那么会有一个bounce message会被发送到原始的发送地址。</p>

<p>如果服务器接收发送者，接下来会接收recipients以及body of message，然后会插入一个Return-Path到message header，来保存发送地址。这个Return-Path通常和原始发送者的FROM或者SENDER相匹配，然后这个并不是必须的，SPF也不阻止伪造这个地址。</p>

<h3>实现</h3>

<p>SPF包含三个相关的工作：</p>

<ul>
<li><p>1.发布一个policy，在DNS信息中添加记录；类似</p>

<p>  example.com.          TXT "v=spf1 +mx a:colo.example.com/28 -all"</p></li>
<li><p>2.检查并且使用SPF信息；</p></li>
<li>3.修改邮件转发</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://www.ietf.org/rfc/rfc4408.txt">RFC4408</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是邮件信誉度]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/08/what-is-email-reputation/"/>
    <updated>2013-04-08T22:22:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/08/what-is-email-reputation</id>
    <content type="html"><![CDATA[<h5>什么是邮件信誉度</h5>

<p>邮件信誉度就想信用卡积分一样，你有一个初始值，需要一段时间慢慢积攒成一个好的信誉度，也有可能一瞬间摧毁你的信誉度。所以，即使你有一个好的信誉度，也不意味着你可以做任意的事情。</p>

<h5>什么会影响邮件信誉度</h5>

<p>以下这些因素经常被反垃圾邮件工具用来作为标准：</p>

<ul>
<li>用户report spam的数量</li>
<li>发往不存在邮箱地址的邮件比例</li>
<li>命中spam trap的频率</li>
<li>邮件发出去多长时间，邮件接收者就点击取消订阅</li>
<li>容量，邮件发送频率已经邮件发送量</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邮件验证]]></title>
    <link href="http://zhangdian.github.com/blog/2013/04/07/email-authentation/"/>
    <updated>2013-04-07T22:04:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/04/07/email-authentation</id>
    <content type="html"><![CDATA[<p>要想让邮件准确的到达目标客户的收件箱，最好的方法就是满足ISPs的需要，其中对邮件信息进行验证是很重要的部分。</p>

<!-- more -->


<h4>什么是邮件验证</h4>

<p>主要有三个部分的邮件验证：</p>

<h5>IP反解</h5>

<p>对于设置了反向解析的IP认为是固定IP，可以追查到使用人。如果发了大量垃圾邮件可以通知IP管理单位协助封停。而对于没有反向解的IP被认为是动态IP，或不可信IP，被大量用来发送垃圾邮件。</p>

<h5>SenderID / SPF</h5>

<p>SenderID和SPF是基于IP的验证。在这种验证机制中，Sender指定哪些IP是属于一个指定的域名的（Sender的域名）。</p>

<p>当一个Sender请求一个到ISP得连接的时候，这个ISP使用这个技术，到 DNS上查询这个IP是否在这个域名的SPF记录下面，也就是这个IP有没有使用这个域名发送邮件的权限。</p>

<p>Gmail和Yahoo会验证SPF，Hotmail会验证SenderID。
SPF和SenderID的区别是获取Sender的算法不同。</p>

<h5>Domain Keys / DKIM</h5>

<p>Domain Keys/DKIM是加密的邮件内容加密算法。在这种机制中，sender在邮件原文中添加一个DKIM-Signature字段，用于ISPs对接收到得内容进行验证。</p>

<p>ISP获取发送域名（DKIM-Signature中的h字段）和DKIM-Signature数字签名，执行一次DNS查询获取到公钥，然后进行邮件正文内容验证。</p>

<p>Gmail和Hotmail验证DKIM，yahoo验证Domain keys</p>

<h4>是否一定需要进行验证？</h4>

<p>如果你的消息没有进行任何验证，那么ISPs<strong>可能会</strong>拒绝连接。所以使用所有的验证机制是比较好的。</p>

<h4>使用了验证机制后，邮件就不会被拒绝了吗？</h4>

<p>ISPs主要还是使用你的IP和域名的<strong>信誉度</strong>来决定是否接受或者拒绝你的邮件，或者将邮件发送到收件箱还是垃圾箱。</p>

<p>验证机制可以帮助ISP来验证你的身份或者邮件内容，但是他并不能提高你的信誉度。</p>

<p>换句话说，验证不一定能提高你的邮件到达率。但是如果没有验证的话，即使你有一个很好的信誉度，也会影响到邮件的到达率。</p>

<h4>信誉度和验证</h4>

<p>上述的三种验证，只能验证IP是否是固定IP，IP是否有权限以声明为某域名发送邮件，邮件内容是否被纂改，但是不能确保你发送的邮件不是垃圾邮件等等。<strong>所以IP和域名的信誉度才是邮件到达率更关键的因素。</strong></p>
]]></content>
  </entry>
  
</feed>
