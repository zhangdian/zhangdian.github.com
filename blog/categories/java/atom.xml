<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | bd17kaka's blog]]></title>
  <link href="http://zhangdian.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://zhangdian.github.com/"/>
  <updated>2013-07-10T22:38:09+08:00</updated>
  <id>http://zhangdian.github.com/</id>
  <author>
    <name><![CDATA[bd17kaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java.util.date 和 java.sql.date]]></title>
    <link href="http://zhangdian.github.com/blog/2013/07/10/java-dot-util-dot-date-and-java-dot-sql-dot-date/"/>
    <updated>2013-07-10T22:04:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/07/10/java-dot-util-dot-date-and-java-dot-sql-dot-date</id>
    <content type="html"><![CDATA[<h2>java.util.date 和 java.sql.date</h2>

<h3>java doc解释</h3>

<h4>java.sql.date</h4>

<p>A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL DATE value. A milliseconds value represents the number of milliseconds that have passed since January 1, 1970 00:00:00.000 GMT.</p>

<p>To conform with the definition of SQL DATE, the millisecond values wrapped by a java.sql.Date instance must be 'normalized' by setting the hours, minutes, seconds, and milliseconds to zero in the particular time zone with which the instance is associated.</p>

<p>java.sql.date是对毫秒时间的简单包装。毫秒时间表示从‘January 1, 1970 00:00:00.000 GMT’到现在的毫秒数。</p>

<p>java.sql.date通过在指定的时区将hours、minutes、seconds、milliseconds设置为0来进行归一化。</p>

<!-- more -->


<h4>java.util.date</h4>

<p>The class Date represents a specific instant in time, with millisecond precision.</p>

<p>Although the Date class is intended to reflect coordinated universal time (UTC), it may not do so exactly, depending on the host environment of the Java Virtual Machine. Nearly all modern operating systems assume that 1 day = 24 × 60 × 60 = 86400 seconds in all cases. In UTC, however, about once every year or two there is an extra second, called a "leap second." The leap second is always added as the last second of the day, and always on December 31 or June 30. For example, the last minute of the year 1995 was 61 seconds long, thanks to an added leap second. Most computer clocks are not accurate enough to be able to reflect the leap-second distinction.</p>

<p>java.util.date代表某一特定时刻的时间，精确到毫秒。</p>

<h3>关键区别</h3>

<ul>
<li>java.util.Date是java中的日期类型，而java.sql.date是JDBC中用于SQL dates的包装类；</li>
<li>java.util.date表示一天的日期和时间，而java.sql.date仅仅表示日期，sql中用于表示时间的类是java.sql.time，另java.sql.Timestamp代表时间戳，精确到纳秒；</li>
<li>java.util.date是java.sql.util的父类；</li>
</ul>


<h3>如何使用</h3>

<p>正常情况下用java.util.date，当涉及到处理JDBC的相关操作时，使用java.sql.date。</p>

<p>在PreparedStatement的setter方法中，对于<code>setDate()</code>方法，使用sql.Date对象，对于<code>setTime()</code>方法，使用sql.Time对象，对于<code>setTimestamp()</code>方法，使用sql.Timestamp对象。</p>

<h3>参考</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/2305973/java-util-date-vs-java-sql-date">java.util.Date vs java.sql.Date - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/5298450/difference-between-date-class-in-package-java-util-package-java-sql">Difference between Date class in Package java.util &amp; Package java.sql - Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/2305973/java-util-date-vs-java-sql-date">java.util.Date vs java.sql.Date - Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSP页面刷新]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/25/html-page-refresh/"/>
    <updated>2013-06-25T21:33:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/25/html-page-refresh</id>
    <content type="html"><![CDATA[<h2>JSP页面刷新</h2>

<p>下面总结JSP页面中的三种刷新方法：</p>

<h3>在html中设置</h3>

<p>在</p>

<pre><code>&lt;title&gt;bd17kaka&lt;/title&gt;
</code></pre>

<p>之後加入下面这一行即可：</p>

<pre><code>&lt;META HTTP-EQUIV="Refresh" content="10"&gt;
</code></pre>

<p>意思是每10秒钟刷新一次页面。</p>

<h3>在JSP页面中设置</h3>

<p>加入</p>

<pre><code>&lt;% response.setHeader("refresh","1"); %&gt;
</code></pre>

<p>即可，意思是每一秒钟刷新一次。</p>

<p>也可以这样，使页面跳转到另外一个页面：</p>

<pre><code>&lt;%  
    response.setHeader("refresh","30;URL=http://www.sina.com");  
%&gt;
</code></pre>

<h3>使用JS</h3>

<p>加入如下JS代码：</p>

<pre><code>&lt;script language="javascript"&gt;
    setTimeout("self.location.reload();",1000);
&lt;script&gt;
</code></pre>

<p>意思是每一秒钟刷新一次。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA中的浅拷贝和深拷贝]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/25/java-deep-copy/"/>
    <updated>2013-06-25T21:32:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/25/java-deep-copy</id>
    <content type="html"><![CDATA[<h2>JAVA中的浅拷贝和深拷贝(shallow copy and deep copy)</h2>

<h3>一个示例</h3>

<p>首先要区分"copy a value"和"copy an object"之间的区别：</p>

<pre><code>// copy a value
int val   = 1;
int cpVal = val;

// copy a value(the object reference for the array above)
int[] val   = new int[]{42};
int[] cpVal = val;

// copy a object
StringBuffer object   = new StringBuffer("I am a object");
StringBuffer cpObject = new StringBuffer(object);
</code></pre>

<p>简单的说，赋值操作都是"copy a value"。如果想要"copy an object"，需要显式的或者在内部进行类似"new"的操作。</p>

<!-- more -->


<h3>对象(object)的浅拷贝和深拷贝</h3>

<p>浅拷贝意味着仅仅拷贝对象的一层，而深拷贝意味着拷贝对象多于一层的数据。那么问题就是，怎么去定义一层？</p>

<p>考虑下面的例子：</p>

<pre><code>public class Example {
    public int foo;
    public int[] bar;
    public Example() { };
    public Example(int foo, int[] bar) { this.foo = foo; this.bar = bar; };
}

Example eg1 = new Example(1, new int[]{1, 2});
</code></pre>

<p>下面两个例子分别执行了对eg1的<strong>浅拷贝和深拷贝</strong>：</p>

<pre><code>Example eg2 = new Example(eg1.foo, eg1.bar);
Example eg2 = new Example(eg1.foo, Arrays.copy(eg1.bar));
</code></pre>

<h3>clone方法</h3>

<p>每一个类和array都包含这个方法，它的功能是创建目的对象的一个拷贝，然而要注意以下几点：</p>

<ul>
<li>deep无法确定到底是多少层？两层？三层？还是所有链接的对象</li>
<li>实际上，文档并没有说明clone是否创建一个新的对象</li>
</ul>


<p>下面是javadoc对于clone的解释：</p>

<pre><code>"Creates and returns a copy of this object. 
The precise meaning of "copy" 
may depend on the class of the object. 

The general intent is that, for any object x, 
the expression x.clone() != x will be true, 
and that 
the expression x.clone().getClass() == x.getClass() 
will be true, 
but these are not absolute requirements. 

While it is typically the case that 
x.clone().equals(x) will be true, 
this is not an absolute requirement."
</code></pre>

<h3>Java List深拷贝实现</h3>

<p>使用List的addAll方法就可以deep copy源列表中的所有元素(前提是list内部元素执行浅拷贝即可)：</p>

<pre><code>public static void main(String[] args) {

    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("1");
    list.add("2");

    // 创建dest list，将源list的所有值都拷贝过去
    List&lt;String&gt; dest = new ArrayList&lt;String&gt;();
    dest.addAll(list);

    // 在dest list中添加一个元素，修改一个元素
    dest.add("3");
    dest.set(0, "2");

    // 打印两个数组
    for (String item : list) {
        System.out.println(item);
    }
    System.out.println("--------------------------------");
    for (String item : dest) {
        System.out.println(item);
    }
    System.out.println("--------------------------------");
}
</code></pre>

<p>输出：</p>

<pre><code>1
2
--------------------------------
2
2
3
--------------------------------
</code></pre>

<h3>参考</h3>

<p><a href="http://stackoverflow.com/questions/6182565/java-deep-copy-shallow-copy-clone">Java :deep copy, shallow copy, clone</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA HashTable & HashMap & ...]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/14/java-hashtable-hashmap/"/>
    <updated>2013-06-14T22:05:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/14/java-hashtable-hashmap</id>
    <content type="html"><![CDATA[<h2>HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap</h2>

<p>经常用到HashMap，也经常听到HashTable和HashMap之间的故事，故google了一番，总结一下常用的各种Map。</p>

<h3>概述</h3>

<p>HashMap：实现上和HashTable相似，并且keys和values是无序的</p>

<p>TreeMap：基于红黑树结构实现，并且key是排好序的</p>

<p>LinkedHashMap：保持插入时的顺序</p>

<p>HashTable：和HashMap相比，是线程安全的</p>

<p>ConcurrentHashMap：相比HashMap，是线程安全的，但是推荐使用它来替代HashTable，因为性能更高，具体见后面</p>

<!-- more -->


<h3>HashMap</h3>

<p>如果HashMap的key是自定义的话，需要重载hashcode和equals方法。因为在HashMap中，不允许有两个完全相同的元素的存在。默认情况下，会使用Object类的hashcode和equals方法。其中，hashcode方法中，不同的对象返回不一样的整数，equals方法只在两个对象引用同一个对象时返回true。</p>

<p>在<a href="http://www.programcreek.com/2011/07/java-equals-and-hashcode-contract/">参考2</a>中，详细讲解了hashcode和equals的原理：</p>

<pre><code>在一个HashMap中查找一个元素的时候，
首先会调用HashCode方法，寻找相应的桶位，
然后在这个桶对应的array中，线性寻找，调用equals方法进行比较，
直到遍历完这个array，或者找到待查的元素。
另外，在该示例中，详细给出了equals和hashcode方法是实现示例。
</code></pre>

<h3>HashMap vs HashTable</h3>

<p>经常听到关于HashMap和HashTable的言论，Java Doc上说：</p>

<pre><code>From Java Doc:  The HashMap class is roughly equivalent to Hashtable, 
except that it is unsynchronized and permits nulls.
</code></pre>

<p>也就是说，两者几乎是一样的一样的，只是HashMap不是线程安全的，并且允许在keys和values中出现null值。</p>

<p>而java5中，也用ConcurrentHashMap来替代了HashTable，两者使用的锁机制是不一样的。</p>

<p>Hashtable中采用的锁机制是一次锁住整个hash表，从而同一时刻只能由一个线程对其进行操作；而ConcurrentHashMap中则是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get,put,remove等常用操作只锁当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。上面说到的16个线程指的是写线程，而读操作大部分时候都不需要用到锁。只有在size等操作时才需要锁住整个hash表。</p>

<h3>TreeMap</h3>

<p>TreeMap是根据key来进行排序的，必须实现Comparable接口，实现其中的方法：</p>

<pre><code>@Override
public int compareTo(Dog o) {
    return  o.size - this.size;
}
</code></pre>

<p>具体事例见<a href="http://java.dzone.com/articles/hashmap-vs-treemap-vs">参考1</a>。</p>

<h3>LinkedHashMap</h3>

<p>LinkedHashMap是HashMap的子类，意味着它继承了HashMap的属性。除此之外，它保存了元素插入的顺序。</p>

<h3>参考</h3>

<ol>
<li><a href="http://java.dzone.com/articles/hashmap-vs-treemap-vs">HashMap vs. TreeMap vs. HashTable vs. LinkedHashMap</a></li>
<li><a href="http://www.programcreek.com/2011/07/java-equals-and-hashcode-contract/">Java equals() and hashCode() Contract – Code Example</a></li>
<li><a href="http://developer.51cto.com/art/201102/246431.htm">Hashtable和HashMap引发的血案</a></li>
<li><a href="http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable">Differences between HashMap and Hashtable?</a></li>
<li><a href="http://blog.csdn.net/itm_hadf/article/details/7506529">java集合框架【3】 java1.5新特性 ConcurrentHashMap、Collections.synchronizedMap、Hashtable讨论</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_5157093c0100hm3y.html">SynchronizedMap和ConcurrentHashMap的深入分析</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java定时任务]]></title>
    <link href="http://zhangdian.github.com/blog/2013/06/14/java-schedule-task/"/>
    <updated>2013-06-14T21:56:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/06/14/java-schedule-task</id>
    <content type="html"><![CDATA[<h2>定时任务</h2>

<h3>关于定时任务</h3>

<p>定时任务有两种：</p>

<ul>
<li>固定延时的定时任务，即一个任务结束等待固定时间后再执行下一个；</li>
<li>固定频率的定时任务，即任务在固定时常后开始执行。</li>
</ul>


<p>前者的意思是，任务完成之后，等待固定的诗句再执行下一个；而后者的意思是在固定的时间执行任务，如果前一次任务的结束时间已经超过了下一次任务开始的时间，那么就会立即执行。</p>

<!-- more -->


<h3>定时任务实现方案</h3>

<p>Timer和ScheduledThreadPoolExecutor都可以完成定时任务的工作，也都支持上面的两种方式。</p>

<p>下面分别给出两个类的示例：</p>

<pre><code>package com.concurrent.basic;
import java.util.Timer;
import java.util.TimerTask;
public class TimerTest {
    private Timer timer = new Timer();

    // 启动计时器
    public void lanuchTimer() {
        timer.schedule(new TimerTask() {
            public void run() {
                // do sth...
            }
        }, 1000 * 3, 500);
    }

    public static void main(String[] args) throws Exception {
        TimerTest test = new TimerTest();
        test.lanuchTimer();
    }
}
</code></pre>

<p>这个例子是固定延时的任务，详细文档见<a href="http://docs.oracle.com/javase/7/docs/api/">Timer</a>，文档中，也有scheduleAtFixedRate方法来调用固定频率的任务。</p>

<pre><code>package com.concurrent.basic;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ScheduledExecutorTest {

    public ScheduledExecutorService scheduExec = Executors
            .newScheduledThreadPool(1);

    // 启动计时器
    public void lanuchTimer() {
        Runnable task = new Runnable() {
            public void run() {
                // do sth...
            }
        };
        scheduExec.scheduleWithFixedDelay(task, 1000 * 5, 1000 * 10,
                TimeUnit.MILLISECONDS);
    }

    public static void main(String[] args) throws Exception {
        ScheduledExecutorTest test = new ScheduledExecutorTest();
        test.lanuchTimer();
    }
}
</code></pre>

<p>这个例子是固定延时的任务示例，也可以调用scheduleAtFixedRate方法来启用固定频率的任务。</p>

<h3>比较</h3>

<ul>
<li>Timer对系统时钟是敏感的，而ScheduledThreadPoolExecutor不是；</li>
<li>Timer只有一个执行线程，所以如果一个线程延时太久了，会影响其他的固定延时任务。而ScheduledThreadPoolExecutor可以配置任意数量的线程，并且你可以完成控制你所创建的这些线程；</li>
<li><em>在Timer中，运行时错误会直接杀死线程，也就会导致线程挂掉，后面计划的任务也不会执行。ScheduledThreadPoolExecutor不仅可以给你catch住运行时异常，还可以对它们进行处理。抛出异常的任务会挂掉，但是其他的定时任务会继续执行。</em></li>
</ul>


<h3>相关链接</h3>

<ul>
<li><a href="http://marshal.easymorse.com/archives/3136">通过java concurrent实现定时任务</a></li>
<li><a href="http://batitan.iteye.com/blog/253483">定时任务:Java中Timer和TimerTask的使用</a></li>
<li><a href="http://stackoverflow.com/questions/409932/java-timer-vs-executorservice">Java Timer vs ExecutorService?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
