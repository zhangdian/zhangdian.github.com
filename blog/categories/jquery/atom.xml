<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jquery | bd17kaka's blog]]></title>
  <link href="http://zhangdian.github.com/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://zhangdian.github.com/"/>
  <updated>2013-05-25T01:18:02+08:00</updated>
  <id>http://zhangdian.github.com/</id>
  <author>
    <name><![CDATA[bd17kaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JS跨域]]></title>
    <link href="http://zhangdian.github.com/blog/2013/05/25/js-cross-domain/"/>
    <updated>2013-05-25T00:14:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2013/05/25/js-cross-domain</id>
    <content type="html"><![CDATA[<h4>什么是跨域</h4>

<p>在JavaScript中，有一个很重要的安全性限制，被称为“Same-Origin Policy”（同源策略）。这一策略对于JavaScript代码能够访问的页面内容做了很重要的限制，即JavaScript只能访问与包含它的文档在同一域下的内容。</p>

<p>所谓同源是指，<strong>域名，协议，端口</strong>相同。</p>

<!-- more -->


<h4>JSONP解决跨域的问题</h4>

<p>JSON(JavaScript Object Notation), JSONP(JSON with Padding)</p>

<p>在同源策略下，在某个服务器下的页面是无法获取到该服务器以外的数据的。</p>

<p><strong>但img、iframe、script等标签是个例外，这些标签可以通过src属性请求到其他服务器上的数据。利用script标签的开放策略，我们可以实现跨域请求数据，当然，也需要服务端的配合。</strong></p>

<p>当我们正常地请求一个JSON数据的时候，服务端返回的是一串JSON类型的数据，而我们使用JSONP模式来请求数据的时候，服务端返回的是一段可执行的JavaScript代码。</p>

<h5>请求JSON数据</h5>

<p>URL     http://lifeblog.bd17kaka.net/json?id=123
返回数据    {"id": 123, "name" : "json"}</p>

<h5>请求JSONP数据</h5>

<p>URL     http://lifeblog.bd17kaka.net/json?id=123&amp;callback=cb
返回数据    cb({"id": 123, "name" : "json"});</p>

<p>上述返回数据包含一段可以执行的代码，客户端应该有cb这个函数。当然，更好返回值写法应该是：
try{cb({"id": 123, "name" : "json"});}catch(e){}</p>

<h4>解决方案</h4>

<p>动态创建一个script标签，src地址是要访问的地址：</p>

<p>```</p>

<script type="text/javascript" src="http://lifeblog.bd17kaka.net/json?id=123&callback=cb"></script>


<p>```</p>

<p>服务器接收到请求，返回如下格式的字符串，包含一段可执行的JS代码：</p>

<p><code>
try{cb({"id": 123, "name" : "json"});}catch(e){}
</code></p>

<p>客户端创建一个cb函数，接收参数，进行相应的处理。</p>

<p><code>
function cb(data) {alert(data);}
</code></p>

<h4>JQUERY解决方案</h4>

<h5>在AJAX中，将dataType设置为“jsonp”</h5>

<p>```
$.ajax({</p>

<pre><code>    dataType: 'jsonp',
    url: 'http://lifeblog.bd17kaka.net/json?id=123',
    success: function(data){

    }
</code></pre>

<p>});
```</p>

<h5>使用getJson方法，在地址中加上callback参数，客户端需要有这个callback的实现</h5>

<p>```
$.getJSON('http://lifeblog.bd17kaka.net/json?id=123&amp;callback=cb', function(data){</p>

<pre><code>cb(data);
</code></pre>

<p>});
```</p>

<h5>使用getScript方法</h5>

<p>```
function foo(data){</p>

<pre><code>    //处理data数据
</code></pre>

<p>}
$.getScript('http://lifeblog.bd17kaka.net/json?id=123&amp;callback=cb');
```</p>

<h4>参考</h4>

<ul>
<li><a href="http://www.clanfei.com/2012/08/1637.html">jQuery中利用JSONP解决AJAX跨域问题</a></li>
<li><a href="http://www.cnblogs.com/chopper/archive/2012/03/24/2403945.html">深入浅出JSONP--解决ajax跨域问题</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
