<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: js | bd17kaka's blog]]></title>
  <link href="http://zhangdian.github.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://zhangdian.github.com/"/>
  <updated>2013-04-03T00:01:08+08:00</updated>
  <id>http://zhangdian.github.com/</id>
  <author>
    <name><![CDATA[bd17kaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[js代码约定]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/11/js-code-conventions/"/>
    <updated>2012-12-11T11:17:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/11/js-code-conventions</id>
    <content type="html"><![CDATA[<p>下面从注释、变量声明等各个方面总结js中的代码约定。</p>

<!-- more -->


<h4>1. 长度</h4>

<p>每行长度不能多于80个字符，如果超过了80个字符的话，就回车换行，新的一行缩进8个字符；</p>

<h4>2. 注释</h4>

<p>注释要有意义，不要写一眼就可以看出来的注释，应该写那种不能马上明白过来的注释；</p>

<h4>3. 变量声明</h4>

<p>所有变量使用之前应该声明，比较好的做法是一个变量一行，后面加上他们的注释，然后以字符顺序排序；</p>

<p>注意：js没有块作用域，只有函数作用域，在函数中任何地方定义的变量，在函数的任何位置都可以使用，所以应该将所有变量定义在函数开头处；</p>

<h4>4. 函数</h4>

<ul>
<li>所有函数使用前都应该声明，内部函数需要用var声明；</li>
<li>在函数名称和‘（’之间不能有空格，在‘）’和‘{’之间要有一个空格；</li>
<li>‘}’单独一行，和函数开头对齐；</li>
</ul>


<p>```
function fun1() {</p>

<pre><code>// 函数体
</code></pre>

<p>}
```</p>

<ul>
<li>如果函数式匿名的，那么在‘function’和‘（’之间应该有一个空格，如果忽略了这个空格，那么有可能把这个函数的函数名误认为‘function’；</li>
</ul>


<p>```
var fun1 = function () {</p>

<pre><code>return 1;
</code></pre>

<p>}
```</p>

<ul>
<li>尽量不要使用全局函数；</li>
<li>如果函数定义的时候立即被调用，那么整个表达式需要被包裹在‘（）’中间，来表明结果是函数的返回值而不是函数本身；</li>
</ul>


<p>```
var fun1 = (function () {</p>

<pre><code>return 1;
</code></pre>

<p>});
```</p>

<h4>5. 变量名称</h4>

<ul>
<li>使用A-Z，a-z，是个数字以及下划线做成名字；</li>
<li>不要使用”_“作为名字的第一个字符，因为这一般表示private变量，但是js实际上没有提供private；</li>
<li>使new实例化的对象必须使用一个大写字符作为开头；</li>
<li>全局变量应该全部是大写的；</li>
</ul>


<h4>6. 语句</h4>

<h5>6.1 单行语句</h5>

<ul>
<li>每一行末尾都应该有一个‘；’；</li>
</ul>


<h5>6.2 符合语句</h5>

<p>复合语句是包含在{}之间的语句列表。</p>

<ul>
<li>被包含在内部的语句需要缩进四个空格；</li>
<li>‘{’应该出现在开始这个compound statement的末尾；</li>
<li>‘}’应该单独一行，和这个compound statement开始处对齐；</li>
<li>即使只有一行语句，也应该包含在‘{}’里面；</li>
</ul>


<h4>7. 返回值</h4>

<p>返回值不应该被‘（）’包括起来；</p>

<h4>8. switch</h4>

<ul>
<li>每一个case都应该和switch对齐；</li>
<li>每一个case，都应该以break、return或者throw结束，不能落空；</li>
</ul>


<h4>9. 哪里使用空格</h4>

<ul>
<li>一个关键字后面紧跟一个‘（’；</li>
<li>每一个‘，’后面都应该跟一个空格；</li>
<li>for循环条件语句中的每一个‘；’后面都应该跟一个空格；</li>
<li>对于一元运算符，在运算符和他的操作数之间不应该添加空格，除了typeof；</li>
<li>所有二元运算符，除了'.' , '(' , '[' 应该使用一个空格来和他的操作数隔开；</li>
</ul>


<h4>10. 额外建议</h4>

<ul>
<li>用{}代替new Object();</li>
<li>用[]代替 new Array();</li>
<li>当数组成员序号是连续的时候，使用数组new Array();</li>
<li>当对象名称是任意的时候，使用object；</li>
<li>尽量使用===和!==，==和!=执行类型检查；</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[借助几个例子加深对js的理解]]></title>
    <link href="http://zhangdian.github.com/blog/2012/12/07/js-basic-concept-with-example/"/>
    <updated>2012-12-07T11:13:00+08:00</updated>
    <id>http://zhangdian.github.com/blog/2012/12/07/js-basic-concept-with-example</id>
    <content type="html"><![CDATA[<p>最近在weibo上看到一个关于js的帖子<a href="http://dmitry.baranovskiy.com/post/91403200">So, you think you know JavaScript?</a>，正好在<a href="http://julying.com/blog/so-you-think-you-know-javascript/">这里</a>看到了关于这几个题目的参考，看完之后总结如下。</p>

<!-- more -->


<h4>题目1</h4>

<p>```
if (!("a" in window)) {</p>

<pre><code>var a = 1;
</code></pre>

<p>}
alert(a);
```</p>

<p>题目的意思是：如果a在window里面的话，将a赋值为1，然后输出a。首先需要明确几个概念：</p>

<ul>
<li>所有的全局变量都属于window，那么语句var a=1；等价于window.a=1；</li>
<li>所有变量声明都在范围作用域的顶部；</li>
</ul>


<p>对于如下代码：</p>

<p><code>
alert("a" in window);
var a;
</code></p>

<p>虽然a的声明在后面，但是js引擎会扫描所有变量，然后将这些变量的声明移动到顶部，那么最终的代码会变成下面这个样子：</p>

<p><code>
var a;
alert("a" in window);
</code></p>

<ul>
<li>js引擎只会将变量声明提前，而不会将变量赋值提前。因为将变量赋值提前可能会使代码的执行出现意想不到的结果；</li>
</ul>


<p>所以题目中的代码最终演化为：</p>

<p>```
var a;
if (!("a" in window)) {</p>

<pre><code>a = 1;
</code></pre>

<p>}
alert(a);
```</p>

<p>所以最终的输出结果会是undefined。这里的“提前”可以理解为“预编译”。</p>

<h4>题目2</h4>

<p>```
var a = 1,</p>

<pre><code>b = function a(x) {
    x &amp;&amp; a(--x);
};
</code></pre>

<p>alert(a);
```</p>

<p>对于这个题目，首先要知道下面几个概念：</p>

<ul>
<li>函数声明和函数表达式（相当于变量赋值）的区别；</li>
</ul>


<p>```
// 函数声明
function functionName(arg1, arg2){</p>

<pre><code>//函数体
</code></pre>

<p>}
// 函数表达式，赋值
var functionName = function(arg1, arg2){</p>

<pre><code>//函数体
</code></pre>

<p>};
```</p>

<ul>
<li>函数声明也是会提前的，和变量声明一样。而函数表达式是不会提前的，和变量赋值一样；</li>
<li>函数声明会覆盖变量声明，但是不会覆盖变量赋值；为了解释这个，下面列举了两个简单例子：</li>
</ul>


<p>```
// 函数声明和变量声明，名字相同
// 尽管变量声明在函数声明后面，但是变量声明还是被函数声明覆盖了
// 输出为function
function value(){</p>

<pre><code>return 1;
</code></pre>

<p>}
var value;
alert(typeof value);    //"function"</p>

<p>// 函数声明和变量赋值，名字相同
// 由于变量声明时进行了赋值，所有函数的声明不能覆盖变量的声明
// 所以最终输出为number
function value(){</p>

<pre><code>return 1;
</code></pre>

<p>}
var value = 1;
alert(typeof value);    //"number"<br/>
```</p>

<p>在我们上面的题目中，首先是变量声明加赋值，然后是一个函数表达式，变量赋值覆盖了函数声明，故而最终的输出为1。此外，如果调用b(2)，在IE下会报错，但是在其他浏览器会返回undefined。</p>

<h4>题目3</h4>

<p>```
function a() {</p>

<pre><code>return 1；
</code></pre>

<p>}
var a;
alert(a);
```</p>

<p>有了前面的知识之后，这题很简单了，函数声明会覆盖变量声明，故而输出是函数a()的定义，如下：</p>

<p>```
function a() {</p>

<pre><code>return 1；
</code></pre>

<p>}
```</p>

<h4>题目4</h4>

<p>```
function b(x, y, a) {</p>

<pre><code>arguments[2] = 10;
alert(a);
</code></pre>

<p>}
b(1, 2, 3);
```</p>

<p>对于arguments，可以参见<a href="http://www.w3school.com.cn/js/pro_js_functions_arguments_object.asp">ECMAScript arguments 对象</a>。活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性的值是Arguments对象。在函数代码中，使用特殊对象arguments，开发者无需明确指出参数名，就能访问它们。故而输出是10。</p>

<h4>题目5</h4>

<p>```
function a() {</p>

<pre><code>alert(this);
</code></pre>

<p>}
a.call(null);
```</p>

<p>理解这个题目，必须要理解this的用法，可以参见<a href="http://julying.com/blog/javascript-this/">this</a>。关于 a.call(null)；根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是null或者undefined的话，call方法将把全局对象（也就是window）作为this的值。所以，不管你什么时候传入null，其this都是全局对象window，所以题目的输出就是：“[object Window]”。</p>
]]></content>
  </entry>
  
</feed>
