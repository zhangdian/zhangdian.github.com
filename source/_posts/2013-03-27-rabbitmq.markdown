---
layout: post
title: "rabbitMQ"
date: 2013-03-27 17:02
comments: true
categories: [技术, 工具]
---
###RabbitMQ
RabbitMQ是一个消息代理，它接收和转发消息。它有六种模式，下面介绍其中的四种模式。

<!-- more -->

####1. 最简单的模式
{% img https://dl.dropbox.com/u/99113526/blog.bd17kaka.net/rabbitmq-1.png %}

#####1.1 角色
* 生产者(Producing)除了发送消息之外，什么也不做，用“P”表示；
* 所有消息都存储在Queue里面，所有消息都流经Queue以及我们的应用程序。Queue没有任何限制，它可以存储尽可能多的消息，本质上，它是一个无穷大(infinite)的buffer；
* 消费者(Consumer)等待接收消息，用“C”表示。

这三个角色没必要在一个机器上，实际上也是这样的。

#####1.2 生产者
生产者发送消息的时候，一定要保证Queue的存在，如果它发送消息到一个不存在的Queue，RabbitMQ会丢弃掉这个消息。

```
channel.queue_declare(queue='hello')
```

RabbitMQ中，消息实际上不会直接发送到Qeueu上，而是先发送到Exchange上，不指定Exchange的话，会发送到默认的Exchange（“”，空字符串）上。

需要在routing_key参数中指定Queue的名称：

```
channel.basic_publish(exchange='',
                      routing_key='hello',
                      body='Hello World!')print " [x] Sent 'Hello World!'"
```

退出之前，需要确保清空缓存，并且所有的消息都发送到RabbitMQ：

```
connection.close()
```

#####1.3 消费者
首先要连接到服务器，其次，要保证Queue的存在，使用queue_declare创建Queue是幂等的（idempotent，也就是多次创建，只会有一个同一名字的Queue被创建），所以，重新声明一个Queue永远是比较好的。

```
channel.queue_declare(queue='hello')
```

RabbitMQ通过注册一个回调函数来接收消息，每次接收到一个消息的时候，都会调用回调函数。其次，需要指定消费者从指定的Queue来接收消息：

```
def callback(ch, method, properties, body):
    print " [x] Received %r" % (body,)

channel.basic_consume(callback,
                      queue='hello',
                      no_ack=True)
```

为了保证正确的读取消息，要保证Queue的存在，只要我们在生产者端创建了Queue，那么就可以保证这点。

然后，就会进入到一个永远都不会停止的循环，只要有消息都会调用回调函数。

####2. One producer, multi consumer
{% img https://dl.dropbox.com/u/99113526/blog.bd17kaka.net/rabbitmq-2.png %}

continue...